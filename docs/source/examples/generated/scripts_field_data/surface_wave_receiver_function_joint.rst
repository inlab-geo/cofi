
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/generated/scripts_field_data/surface_wave_receiver_function_joint.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_generated_scripts_field_data_surface_wave_receiver_function_joint.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_generated_scripts_field_data_surface_wave_receiver_function_joint.py:


Surface wave and receiver function - joint inversion (field data)
=================================================================

.. GENERATED FROM PYTHON SOURCE LINES 9-14

|Open In Colab|

.. |Open In Colab| image:: https://img.shields.io/badge/open%20in-Colab-b5e2fa?logo=googlecolab&style=flat-square&color=ffd670
   :target: https://colab.research.google.com/github/inlab-geo/cofi-examples/blob/main/examples/sw_rf_joint/surface_wave_receiver_function_joint.ipynb


.. GENERATED FROM PYTHON SOURCE LINES 17-24

If you are running this notebook locally, make sure you’ve followed
`steps
here <https://github.com/inlab-geo/cofi-examples#run-the-examples-with-cofi-locally>`__
to set up the environment. (This
`environment.yml <https://github.com/inlab-geo/cofi-examples/blob/main/envs/environment.yml>`__
file specifies a list of packages required to run the notebooks)


.. GENERATED FROM PYTHON SOURCE LINES 27-48

--------------

What we do in this notebook
---------------------------

Here we extend the example where CoFI has been used for the inversion of
Rayleigh wave phase velocities for a 1D layered earth to a joint
inversion where we also account for receiver functions.

In this example, we extend from the synthetic data notebook and apply
the joint inversion on a field data presented in the Computer Programs
in Seismology (see:
https://www.eas.slu.edu/eqc/eqc_cps/TUTORIAL/STRUCT/index.html).

**Learning outcomes**

-  A demonstration of CoFI’s ability to switch between parameter
   estimation and ensemble methods.
-  An application of CoFI for a joint inversion, here of Rayleigh wave
   pahse velocity and receiver function data, to a field dataset


.. GENERATED FROM PYTHON SOURCE LINES 51-60

Utilities preparation
---------------------

In this example, we look at a joint inversion problem of surface wave
and receiver function.

We use ``pysurf96`` for computing the forward step of surface wave, and
use ``espresso`` for receiver function calculations.


.. GENERATED FROM PYTHON SOURCE LINES 60-72

.. code-block:: Python


    # -------------------------------------------------------- #
    #                                                          #
    #     Uncomment below to set up environment on "colab"     #
    #                                                          #
    # -------------------------------------------------------- #

    # !pip install -U cofi geo-espresso
    # !pip install git+https://github.com/miili/pysurf96.git
    # !git clone https://github.com/inlab-geo/cofi-examples.git
    # %cd cofi-examples/examples/sw_rf_joint








.. GENERATED FROM PYTHON SOURCE LINES 74-87

.. code-block:: Python


    import glob
    import numpy as np
    import scipy
    import matplotlib.pyplot as plt
    import matplotlib.gridspec as gridspec
    import arviz as az

    import pysurf96
    import bayesbay
    import cofi
    import espresso








.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: Python


    np.seterr(all="ignore");





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    {'divide': 'warn', 'over': 'warn', 'under': 'ignore', 'invalid': 'warn'}



.. GENERATED FROM PYTHON SOURCE LINES 97-99

**Model vector**


.. GENERATED FROM PYTHON SOURCE LINES 99-108

.. code-block:: Python


    # display theory on the 1D model parameterisation
    from IPython.display import display, Markdown

    with open("../../theory/misc_1d_model_parameterisation.md", "r") as f:
        content = f.read()

    display(Markdown(content))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <IPython.core.display.Markdown object>




.. GENERATED FROM PYTHON SOURCE LINES 110-123

.. code-block:: Python


    # layercake model utilities
    def form_layercake_model(thicknesses, vs):
        model = np.zeros((len(vs)*2-1,))
        model[1::2] = thicknesses
        model[::2] = vs
        return model

    def split_layercake_model(model):
        thicknesses = model[1::2]
        vs = model[::2]
        return thicknesses, vs








.. GENERATED FROM PYTHON SOURCE LINES 125-135

.. code-block:: Python


    # voronoi model utilities
    def form_voronoi_model(voronoi_sites, vs):
        return np.hstack((vs, voronoi_sites))

    def split_voronoi_model(model):
        voronoi_sites = model[len(model)//2:]
        vs = model[:len(model)//2]
        return voronoi_sites, vs








.. GENERATED FROM PYTHON SOURCE LINES 137-160

.. code-block:: Python


    def voronoi_to_layercake(voronoi_vector: np.ndarray) -> np.ndarray:
        n_layers = len(voronoi_vector) // 2
        velocities = voronoi_vector[:n_layers]
        voronoi_sites = voronoi_vector[n_layers:]
        depths = (voronoi_sites[:-1] + voronoi_sites[1:]) / 2
        thicknesses = depths - np.insert(depths[:-1], 0, 0)
        layercake_vector = np.zeros((2*n_layers-1,))
        layercake_vector[::2] = velocities
        layercake_vector[1::2] = thicknesses
        return layercake_vector

    def layercake_to_voronoi(layercake_vector: np.ndarray, first_voronoi_site: float = 0.0) -> np.ndarray:
        n_layers = len(layercake_vector) // 2 + 1
        thicknesses = layercake_vector[1::2]
        velocities = layercake_vector[::2]
        depths = np.cumsum(thicknesses)
        voronoi_sites = np.zeros((n_layers,))
        for i in range(1,len(voronoi_sites)):
            voronoi_sites[i] = 2 * depths[i-1] - voronoi_sites[i-1]
        voronoi_vector = np.hstack((velocities, voronoi_sites))
        return voronoi_vector








.. GENERATED FROM PYTHON SOURCE LINES 165-167

**Interfacing to pysurf96**


.. GENERATED FROM PYTHON SOURCE LINES 167-174

.. code-block:: Python


    # display theory on the using the forward solver
    with open("../../theory/geo_surface_wave_dispersion2.md", "r") as f:
        content = f.read()

    display(Markdown(content))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <IPython.core.display.Markdown object>




.. GENERATED FROM PYTHON SOURCE LINES 176-181

.. code-block:: Python


    VP_VS = 1.77
    RHO_VP_K = 0.32
    RHO_VP_B = 0.77








.. GENERATED FROM PYTHON SOURCE LINES 183-202

.. code-block:: Python


    # forward through pysurf96
    def forward_sw(model, periods):
        thicknesses, vs = split_layercake_model(model)
        thicknesses = np.append(thicknesses, 10)
        vp = vs * VP_VS
        rho = RHO_VP_K * vp + RHO_VP_B
        return pysurf96.surf96(
            thicknesses,
            vp,
            vs,
            rho,
            periods,
            wave="rayleigh",
            mode=1,
            velocity="phase",
            flat_earth=False,
        )








.. GENERATED FROM PYTHON SOURCE LINES 204-219

.. code-block:: Python


    def forward_sw_interp(model, periods):
        pysurf_periods = np.logspace(
            np.log(np.min(periods)), 
            np.log(np.max(periods+1)), 
            60,
            base=np.e, 
        )
        pysurf_dpred = forward_sw(model, pysurf_periods)
        interp_func = scipy.interpolate.interp1d(pysurf_periods, 
                                                 pysurf_dpred, 
                                                 fill_value="extrapolate")
        dpred = interp_func(periods)
        return dpred








.. GENERATED FROM PYTHON SOURCE LINES 224-226

**Interfacing to Espresso**


.. GENERATED FROM PYTHON SOURCE LINES 226-230

.. code-block:: Python


    # obtain the receiver function library
    rf_lib = espresso.ReceiverFunctionInversionKnt().rf








.. GENERATED FROM PYTHON SOURCE LINES 232-239

.. code-block:: Python


    t_shift = 5
    t_duration = 25
    t_sampling_interval = 0.1
    gauss = 1
    ray_param_s_km = 0.07








.. GENERATED FROM PYTHON SOURCE LINES 241-261

.. code-block:: Python


    # forward through rf in espresso
    def forward_rf(
        model, 
        t_shift=t_shift, 
        t_duration=t_duration, 
        t_sampling_interval=t_sampling_interval, 
        gauss=gauss, 
        ray_param_s_km=ray_param_s_km,
        return_times=False
    ):
        h, vs = split_layercake_model(model)
        data = rf_lib.rf_calc(ps=0, thik=h, beta=vs, kapa=np.ones((len(vs),))*VP_VS, p=ray_param_s_km, 
                          duration=t_duration, dt=t_sampling_interval, shft=t_shift, gauss=gauss)
        if return_times:
            times = np.arange(len(data)) * t_sampling_interval - t_shift
            return data, times
        else:
            return data








.. GENERATED FROM PYTHON SOURCE LINES 263-274

.. code-block:: Python


    t_shift = 5
    t_duration = 70
    t_sampling_interval = 0.5

    def forward_rf_interp(model, gauss, ray_param):
        dpred, times = forward_rf(model, t_shift, t_duration, t_sampling_interval,
                           gauss=gauss, ray_param_s_km=ray_param, return_times=True)
        interp_func = scipy.interpolate.interp1d(times, dpred, fill_value="extrapolate")
        return interp_func(rf_field_times)








.. GENERATED FROM PYTHON SOURCE LINES 279-281

**Numerical Jacobian**


.. GENERATED FROM PYTHON SOURCE LINES 281-294

.. code-block:: Python


    def jacobian(model, data_length, fwd, fwd_kwargs, relative_step=0.01):
        jac = np.zeros((data_length, len(model)))
        original_dpred = fwd(model, **fwd_kwargs)
        for i in range(len(model)):
            perturbed_model = model.copy()
            step = relative_step * model[i]
            perturbed_model[i] += step
            perturbed_dpred = fwd(perturbed_model, **fwd_kwargs)
            derivative = (perturbed_dpred - original_dpred) / step
            jac[:, i] = derivative
        return jac








.. GENERATED FROM PYTHON SOURCE LINES 299-301

**Plotting**


.. GENERATED FROM PYTHON SOURCE LINES 301-326

.. code-block:: Python


    def plot_model(model, ax=None, title="model", **kwargs):
        # process data
        thicknesses = np.append(model[1::2], max(model[1::2]))
        velocities = model[::2]
        y = np.insert(np.cumsum(thicknesses), 0, 0)
        x = np.insert(velocities, 0, velocities[0])
    
        # plot depth profile
        if ax is None:
            _, ax = plt.subplots()
        plotting_style = {
            "linewidth": kwargs.pop("linewidth", kwargs.pop("lw", 0.5)),
            "alpha": 0.2,
            "color": kwargs.pop("color", kwargs.pop("c", "blue")),
        }
        plotting_style.update(kwargs)
        ax.step(x, y, where="post", **plotting_style)
        if ax.get_ylim()[0] < ax.get_ylim()[1]:
            ax.invert_yaxis()
        ax.set_xlabel("Vs (km/s)")
        ax.set_ylabel("Depth (km)")
        ax.set_title(title)
        return ax








.. GENERATED FROM PYTHON SOURCE LINES 328-348

.. code-block:: Python


    def plot_data(x, y, ax=None, scatter=False, xlabel=None, ylabel=None, 
                  title="surface wave data", **kwargs):
        if ax is None:
            _, ax = plt.subplots()
        plotting_style = {
            "linewidth": kwargs.pop("linewidth", kwargs.pop("lw", 1)),
            "alpha": 1,
            "color": kwargs.pop("color", kwargs.pop("c", "blue")),
        }
        plotting_style.update(**kwargs)
        if scatter:
            ax.scatter(x, y, **plotting_style)
        else:
            ax.plot(x, y, **plotting_style)
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        ax.set_title(title)
        return ax








.. GENERATED FROM PYTHON SOURCE LINES 350-373

.. code-block:: Python


    def plot_sw_data(rayleigh_phase_velocities, periods, ax=None, scatter=False, 
                     title="surface wave data", **kwargs):
        return plot_data(x=periods, 
                         y=rayleigh_phase_velocities, 
                         ax=ax, 
                         scatter=scatter, 
                         title=title, 
                         xlabel="Periods (s)", 
                         ylabel="Rayleigh phase velocities (km/s)", 
                         **kwargs)

    def plot_rf_data(rf_data, rf_times, ax=None, scatter=False,
                     title="receiver function data", **kwargs):
        return plot_data(x=rf_times, 
                         y=rf_data, 
                         ax=ax, 
                         scatter=scatter, 
                         title=title, 
                         xlabel="Times (s)", 
                         ylabel="Receiver function amplitudes", 
                         **kwargs)








.. GENERATED FROM PYTHON SOURCE LINES 378-381

Read data
---------


.. GENERATED FROM PYTHON SOURCE LINES 384-386

**Rayleigh observations**


.. GENERATED FROM PYTHON SOURCE LINES 386-401

.. code-block:: Python


    file_surf_data = "../../data/sw_rf_joint/data/SURF/nnall.dsp"

    with open(file_surf_data, "r") as file:
        lines = file.readlines()
        surf_data = []
        for line in lines:
            row = line.strip().split()
            if "C" in row:
                surf_data.append([float(e) for e in row[5:8]])

    field_d = np.array(surf_data)
    field_d_periods = field_d[:,0]
    rayleigh_field_d_obs = field_d[:,1]








.. GENERATED FROM PYTHON SOURCE LINES 403-408

.. code-block:: Python


    ax = plot_sw_data(rayleigh_field_d_obs, field_d_periods, color="brown", s=5, scatter=True,
                 label="d_obs")
    ax.legend();




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_001.png
   :alt: surface wave data
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8251559f90>



.. GENERATED FROM PYTHON SOURCE LINES 413-415

**Receiver function observations**


.. GENERATED FROM PYTHON SOURCE LINES 415-432

.. code-block:: Python


    files_rftn_data = glob.glob("../../data/sw_rf_joint/data/RFTN/rf_*.txt")

    all_gauss = []
    all_ray_params = []
    all_rf_field_dobs = []
    rf_field_times = None

    for file in files_rftn_data:
        gauss, ray_param_s_km = file.split("_")[-2:]
        all_gauss.append(float(gauss))
        all_ray_params.append(float(ray_param_s_km[:-4]))
        dataset = np.loadtxt(file)
        if rf_field_times is None:
            rf_field_times = dataset[:, 0]
        all_rf_field_dobs.append(dataset[:, 1])








.. GENERATED FROM PYTHON SOURCE LINES 434-457

.. code-block:: Python


    def plot_rf_field_data(all_rf_data, all_gauss, all_ray_params, rf_field_times, 
                           axes=None, color="darkblue", label=None, **kwargs):
        if axes is None:
            _, axes = plt.subplots(13, 3, figsize=(10, 12))
        for i, ax in enumerate(axes.flat):
            ax.set_xlim(-5, 20)
            gauss = all_gauss[i]
            ray_param = all_ray_params[i]
            rf_dobs = all_rf_data[i]
            title=f"ray (s/km) = {ray_param}, gauss = {gauss}"
            plot_rf_data(rf_dobs, rf_field_times, ax=ax, color=color, 
                         title=title, label=label, **kwargs)
            ax.set_ylabel("Amplitude")

        for ax in axes[:-1, :].flat:
            ax.set_xlabel("")
            ax.tick_params(labelbottom=False)
        for ax in axes[:, 1:].flat:
            ax.set_ylabel("")
        plt.tight_layout()
        return axes








.. GENERATED FROM PYTHON SOURCE LINES 459-462

.. code-block:: Python


    plot_rf_field_data(all_rf_field_dobs, all_gauss, all_ray_params, rf_field_times);




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_002.png
   :alt: ray (s/km) = 0.0716, gauss = 1.0, ray (s/km) = 0.0751, gauss = 1.0, ray (s/km) = 0.0705, gauss = 1.0, ray (s/km) = 0.0713, gauss = 2.5, ray (s/km) = 0.0738, gauss = 1.0, ray (s/km) = 0.0658, gauss = 2.5, ray (s/km) = 0.0698, gauss = 1.0, ray (s/km) = 0.0665, gauss = 1.0, ray (s/km) = 0.0698, gauss = 2.5, ray (s/km) = 0.0746, gauss = 1.0, ray (s/km) = 0.076, gauss = 1.0, ray (s/km) = 0.069, gauss = 2.5, ray (s/km) = 0.0687, gauss = 2.5, ray (s/km) = 0.0698, gauss = 2.5, ray (s/km) = 0.0746, gauss = 1.0, ray (s/km) = 0.0705, gauss = 2.5, ray (s/km) = 0.069, gauss = 1.0, ray (s/km) = 0.0724, gauss = 1.0, ray (s/km) = 0.0658, gauss = 1.0, ray (s/km) = 0.0713, gauss = 1.0, ray (s/km) = 0.0724, gauss = 2.5, ray (s/km) = 0.0687, gauss = 1.0, ray (s/km) = 0.0665, gauss = 2.5, ray (s/km) = 0.0716, gauss = 2.5, ray (s/km) = 0.0787, gauss = 1.0, ray (s/km) = 0.07, gauss = 1.0, ray (s/km) = 0.0732, gauss = 1.0, ray (s/km) = 0.0724, gauss = 1.0, ray (s/km) = 0.0704, gauss = 1.0, ray (s/km) = 0.0724, gauss = 2.5, ray (s/km) = 0.0698, gauss = 1.0, ray (s/km) = 0.0746, gauss = 2.5, ray (s/km) = 0.0739, gauss = 2.5, ray (s/km) = 0.0739, gauss = 1.0, ray (s/km) = 0.0738, gauss = 2.5, ray (s/km) = 0.0716, gauss = 1.0, ray (s/km) = 0.0751, gauss = 2.5, ray (s/km) = 0.076, gauss = 2.5, ray (s/km) = 0.07, gauss = 2.5
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([[<Axes: title={'center': 'ray (s/km) = 0.0716, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0751, gauss = 1.0'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0705, gauss = 1.0'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0713, gauss = 2.5'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0738, gauss = 1.0'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0658, gauss = 2.5'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0698, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0665, gauss = 1.0'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0698, gauss = 2.5'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0746, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.076, gauss = 1.0'}>,
            <Axes: title={'center': 'ray (s/km) = 0.069, gauss = 2.5'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0687, gauss = 2.5'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0698, gauss = 2.5'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0746, gauss = 1.0'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0705, gauss = 2.5'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.069, gauss = 1.0'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0724, gauss = 1.0'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0658, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0713, gauss = 1.0'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0724, gauss = 2.5'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0687, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0665, gauss = 2.5'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0716, gauss = 2.5'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0787, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.07, gauss = 1.0'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0732, gauss = 1.0'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0724, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0704, gauss = 1.0'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0724, gauss = 2.5'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0698, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0746, gauss = 2.5'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0739, gauss = 2.5'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0739, gauss = 1.0'}, ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.0738, gauss = 2.5'}>,
            <Axes: title={'center': 'ray (s/km) = 0.0716, gauss = 1.0'}>],
           [<Axes: title={'center': 'ray (s/km) = 0.0751, gauss = 2.5'}, xlabel='Times (s)', ylabel='Amplitude'>,
            <Axes: title={'center': 'ray (s/km) = 0.076, gauss = 2.5'}, xlabel='Times (s)'>,
            <Axes: title={'center': 'ray (s/km) = 0.07, gauss = 2.5'}, xlabel='Times (s)'>]],
          dtype=object)



.. GENERATED FROM PYTHON SOURCE LINES 464-483

.. code-block:: Python


    # stacking the data into gauss=1.0 and gauss=2.5 groups
    all_rf_field_dobs_1_0 = []
    all_rf_field_dobs_2_5 = []
    ray_params_1_0 = []
    ray_params_2_5 = []
    for gauss, ray_param, dobs in zip(all_gauss, all_ray_params, all_rf_field_dobs):
        if gauss == 1:
            all_rf_field_dobs_1_0.append(dobs)
            ray_params_1_0.append(ray_param)
        else:
            all_rf_field_dobs_2_5.append(dobs)
            ray_params_2_5.append(ray_param)

    rf_field_dobs_1_0 = np.mean(all_rf_field_dobs_1_0, axis=0)
    rf_field_dobs_2_5 = np.mean(all_rf_field_dobs_2_5, axis=0)
    ray_param_1_0 = np.mean(ray_params_1_0)
    ray_param_2_5 = np.mean(ray_params_2_5)








.. GENERATED FROM PYTHON SOURCE LINES 485-507

.. code-block:: Python


    _, axes = plt.subplots(2, 1, figsize=(5,4))

    axes[0].set_xlim(-5, 20)
    axes[1].set_xlim(-5, 20)

    plot_rf_data(
        rf_field_dobs_1_0, 
        rf_field_times, 
        title=f"ray (s/km) = {ray_param_1_0}, gauss = 1.0", 
        ax=axes[0]
    )
    axes[0].set_ylabel("Amplitude")
    plot_rf_data(
        rf_field_dobs_2_5, 
        rf_field_times, 
        title=f"ray (s/km) = {ray_param_2_5}, gauss = 2.5",
        ax=axes[1]
    )
    axes[1].set_ylabel("Amplitude")
    plt.tight_layout()




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_003.png
   :alt: ray (s/km) = 0.07180454545454547, gauss = 1.0, ray (s/km) = 0.07124705882352941, gauss = 2.5
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 512-514

**Reference good model**


.. GENERATED FROM PYTHON SOURCE LINES 514-527

.. code-block:: Python


    file_end_mod = "../../data/sw_rf_joint/data/JOINT/end.mod"

    with open(file_end_mod, "r") as file:
        lines = file.readlines()
        ref_good_model = []
        for line in lines[12:]:
            row = line.strip().split()
            ref_good_model.append([float(row[0]), float(row[2])])

    ref_good_model = np.array(ref_good_model)
    ref_good_model = form_layercake_model(ref_good_model[:-1,0], ref_good_model[:,1])








.. GENERATED FROM PYTHON SOURCE LINES 529-533

.. code-block:: Python


    _, ax = plt.subplots(figsize=(4,6))
    plot_model(ref_good_model, ax=ax, alpha=1);




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_004.png
   :alt: model
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <Axes: title={'center': 'model'}, xlabel='Vs (km/s)', ylabel='Depth (km)'>



.. GENERATED FROM PYTHON SOURCE LINES 538-541

Optimisation
------------


.. GENERATED FROM PYTHON SOURCE LINES 541-548

.. code-block:: Python


    n_dims = 29

    init_thicknesses = np.ones((n_dims//2,)) * 10
    init_vs = np.ones((n_dims//2+1,)) * 4.0
    init_model = form_layercake_model(init_thicknesses, init_vs)








.. GENERATED FROM PYTHON SOURCE LINES 550-557

.. code-block:: Python


    my_reg = cofi.utils.QuadraticReg(
        weighting_matrix="damping", 
        model_shape=(n_dims,), 
        reference_model=init_model
    )








.. GENERATED FROM PYTHON SOURCE LINES 559-585

.. code-block:: Python


    def my_objective(model, fwd_funcs, d_obs_list, lamda=1.0):
        data_misfit = 0
        for (fwd, fwd_kwargs), d_obs in zip(fwd_funcs, d_obs_list):
            d_pred = fwd(model, **fwd_kwargs)
            data_misfit += np.sum((d_obs - d_pred) ** 2)
        reg = my_reg(model)
        return data_misfit + lamda * reg

    def my_objective_gradient(model, fwd_funcs, d_obs_list, lamda=1.0):
        data_misfit_grad = 0
        for (fwd, fwd_kwargs), d_obs in zip(fwd_funcs, d_obs_list):
            d_pred = fwd(model, **fwd_kwargs)
            jac = jacobian(model, len(d_obs), fwd, fwd_kwargs)
            data_misfit_grad += -2 * jac.T @ (d_obs - d_pred)
        reg_grad = my_reg.gradient(model)
        return data_misfit_grad + lamda * reg_grad

    def my_objective_hessian(model, fwd_funcs, d_obs_list, lamda=1.0):
        data_misfit_hess = 0
        for (fwd, fwd_kwargs), d_obs in zip(fwd_funcs, d_obs_list):
            jac = jacobian(model, len(d_obs), fwd, fwd_kwargs)
            data_misfit_hess += 2 * jac.T @ jac
        reg_hess = my_reg.hessian(model)
        return data_misfit_hess + lamda * reg_hess








.. GENERATED FROM PYTHON SOURCE LINES 587-596

.. code-block:: Python


    fwd_funcs = [
        (forward_sw_interp, {"periods": field_d_periods}), 
        (forward_rf_interp, {"gauss": 1, "ray_param": ray_param_1_0}), 
        (forward_rf_interp, {"gauss": 2.5, "ray_param": ray_param_2_5})
    ]

    d_obs_list = [rayleigh_field_d_obs, rf_field_dobs_1_0, rf_field_dobs_2_5]








.. GENERATED FROM PYTHON SOURCE LINES 601-604

Optimisation with no damping
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 604-618

.. code-block:: Python


    lamda = 0

    kwargs = {
        "fwd_funcs": fwd_funcs, 
        "d_obs_list": d_obs_list, 
        "lamda": lamda
    }
    joint_field_problem_no_reg = cofi.BaseProblem()
    joint_field_problem_no_reg.set_objective(my_objective, kwargs=kwargs)
    joint_field_problem_no_reg.set_gradient(my_objective_gradient, kwargs=kwargs)
    joint_field_problem_no_reg.set_hessian(my_objective_hessian, kwargs=kwargs)
    joint_field_problem_no_reg.set_initial_model(init_model)








.. GENERATED FROM PYTHON SOURCE LINES 623-625

**Define ``InversionOptions``**


.. GENERATED FROM PYTHON SOURCE LINES 625-630

.. code-block:: Python


    inv_options_optimiser = cofi.InversionOptions()
    inv_options_optimiser.set_tool("scipy.optimize.minimize")
    inv_options_optimiser.set_params(method="trust-exact")








.. GENERATED FROM PYTHON SOURCE LINES 635-637

**Define ``Inversion`` and run**


.. GENERATED FROM PYTHON SOURCE LINES 637-641

.. code-block:: Python


    inv_optimiser_no_reg_field = cofi.Inversion(joint_field_problem_no_reg, inv_options_optimiser)
    inv_res_optimiser_field_no_reg = inv_optimiser_no_reg_field.run()








.. GENERATED FROM PYTHON SOURCE LINES 646-648

**Plot results**


.. GENERATED FROM PYTHON SOURCE LINES 648-683

.. code-block:: Python


    _, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4), gridspec_kw={'width_ratios': [1, 2.5]})

    ax1.set_ylim(100)

    plot_model(inv_res_optimiser_field_no_reg.model, ax=ax1, color="green", alpha=1, 
               label="model inverted from field data")
    plot_model(ref_good_model, ax=ax1, color="red", alpha=1, 
               label="reference good model")
    plot_model(init_model, ax=ax1, alpha=1, lw=1.5, color="purple", 
               label="initial model for damped solution")

    field_d_periods_logspace = np.logspace(
        np.log(np.min(field_d_periods)), 
        np.log(np.max(field_d_periods+1)), 
        60, 
        base=np.e, 
    )

    plot_sw_data(rayleigh_field_d_obs, field_d_periods, ax=ax2, color="orange", s=5, scatter=True, 
                 label="d_obs")
    plot_sw_data(forward_sw_interp(inv_res_optimiser_field_no_reg.model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, color="green", 
                 label="d_pred from inverted model")
    plot_sw_data(forward_sw_interp(ref_good_model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, color="red", 
                 label="d_pred from reference good model")
    plot_sw_data(forward_sw_interp(init_model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, 
                 alpha=1, lw=1.5, linestyle="--", color="purple", 
                 label="d_pred from initial model")

    ax1.legend(loc="lower center", bbox_to_anchor=(0.5, -0.4))
    ax2.legend(loc="lower center", bbox_to_anchor=(0.5, -0.46));




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_005.png
   :alt: model, surface wave data
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f82508fb160>



.. GENERATED FROM PYTHON SOURCE LINES 685-707

.. code-block:: Python


    all_rf_dpred = []
    all_rf_dpred_init_m = []

    for gauss, ray_param in zip(all_gauss, all_ray_params):
        dpred = forward_rf_interp(inv_res_optimiser_field_no_reg.model, gauss, ray_param)
        all_rf_dpred.append(dpred)
        dpred_init_m = forward_rf_interp(init_model, gauss, ray_param)
        all_rf_dpred_init_m.append(dpred_init_m)

    axes = plot_rf_field_data(all_rf_dpred, all_gauss, all_ray_params, rf_field_times,
                              color="darkblue", linestyle="dashed", 
                              label="d_pred from inverted model")
    plot_rf_field_data(all_rf_dpred_init_m, all_gauss, all_ray_params, rf_field_times,
                       axes=axes, color="gray",
                       label="d_pred from starting model")
    plot_rf_field_data(all_rf_field_dobs, all_gauss, all_ray_params, rf_field_times,
                       axes=axes, color="brown", linestyle="dashed", 
                       label="d_obs")

    axes[-1,-1].legend(loc="lower center", bbox_to_anchor=(0.5, -2.5));




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_006.png
   :alt: ray (s/km) = 0.0716, gauss = 1.0, ray (s/km) = 0.0751, gauss = 1.0, ray (s/km) = 0.0705, gauss = 1.0, ray (s/km) = 0.0713, gauss = 2.5, ray (s/km) = 0.0738, gauss = 1.0, ray (s/km) = 0.0658, gauss = 2.5, ray (s/km) = 0.0698, gauss = 1.0, ray (s/km) = 0.0665, gauss = 1.0, ray (s/km) = 0.0698, gauss = 2.5, ray (s/km) = 0.0746, gauss = 1.0, ray (s/km) = 0.076, gauss = 1.0, ray (s/km) = 0.069, gauss = 2.5, ray (s/km) = 0.0687, gauss = 2.5, ray (s/km) = 0.0698, gauss = 2.5, ray (s/km) = 0.0746, gauss = 1.0, ray (s/km) = 0.0705, gauss = 2.5, ray (s/km) = 0.069, gauss = 1.0, ray (s/km) = 0.0724, gauss = 1.0, ray (s/km) = 0.0658, gauss = 1.0, ray (s/km) = 0.0713, gauss = 1.0, ray (s/km) = 0.0724, gauss = 2.5, ray (s/km) = 0.0687, gauss = 1.0, ray (s/km) = 0.0665, gauss = 2.5, ray (s/km) = 0.0716, gauss = 2.5, ray (s/km) = 0.0787, gauss = 1.0, ray (s/km) = 0.07, gauss = 1.0, ray (s/km) = 0.0732, gauss = 1.0, ray (s/km) = 0.0724, gauss = 1.0, ray (s/km) = 0.0704, gauss = 1.0, ray (s/km) = 0.0724, gauss = 2.5, ray (s/km) = 0.0698, gauss = 1.0, ray (s/km) = 0.0746, gauss = 2.5, ray (s/km) = 0.0739, gauss = 2.5, ray (s/km) = 0.0739, gauss = 1.0, ray (s/km) = 0.0738, gauss = 2.5, ray (s/km) = 0.0716, gauss = 1.0, ray (s/km) = 0.0751, gauss = 2.5, ray (s/km) = 0.076, gauss = 2.5, ray (s/km) = 0.07, gauss = 2.5
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f82512a1f00>



.. GENERATED FROM PYTHON SOURCE LINES 712-715

Optimal damping
~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 715-752

.. code-block:: Python


    lambdas = np.logspace(-6, 6, 15)

    my_lcurve_problems = []
    for lamb in lambdas:
        my_problem = cofi.BaseProblem()
        kwargs = {
            "fwd_funcs": fwd_funcs, 
            "d_obs_list": d_obs_list, 
            "lamda": lamb
        }
        my_problem.set_objective(my_objective, kwargs=kwargs)
        my_problem.set_gradient(my_objective_gradient, kwargs=kwargs)
        my_problem.set_hessian(my_objective_hessian, kwargs=kwargs)
        my_problem.set_initial_model(init_model)
        my_lcurve_problems.append(my_problem)

    def my_callback(inv_result, i):
        m = inv_result.model
        res_norm = 0
        for (fwd, fwd_kwargs), d_obs in zip(fwd_funcs, d_obs_list):
            d_pred = fwd(m, **fwd_kwargs)
            res_norm += np.sum((d_obs - d_pred) ** 2)
        reg_norm = np.sqrt(my_reg(m))
        print(f"Finished inversion with lambda={lambdas[i]}: {res_norm}, {reg_norm}")
        return res_norm, reg_norm

    my_inversion_pool = cofi.utils.InversionPool(
        list_of_inv_problems=my_lcurve_problems,
        list_of_inv_options=inv_options_optimiser,
        callback=my_callback,
        parallel=False
    )
    all_res, all_cb_returns = my_inversion_pool.run()

    l_curve_points = list(zip(*all_cb_returns))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Finished inversion with lambda=1e-06: 4.850830956077422, 4.931520932065487
    Finished inversion with lambda=7.196856730011514e-06: 4.850102297614024, 4.908422375008429
    Finished inversion with lambda=5.1794746792312125e-05: 4.8532326183548715, 4.866231329873608
    Finished inversion with lambda=0.0003727593720314938: 4.852399932988693, 3.296605093387986
    Finished inversion with lambda=0.0026826957952797246: 4.824349841819513, 3.7647836688036023
    Finished inversion with lambda=0.019306977288832496: 4.882199476895455, 1.9281149915994273
    Finished inversion with lambda=0.1389495494373136: 4.930650381577375, 1.7211011175832307
    Finished inversion with lambda=1.0: 5.361647931548996, 1.4439410574698817
    Finished inversion with lambda=7.196856730011514: 9.115079958605529, 1.0172235109842522
    Finished inversion with lambda=51.79474679231202: 26.641506906812104, 0.36817412478412337
    Finished inversion with lambda=372.7593720314938: 39.779906394496614, 0.0634702062187113
    Finished inversion with lambda=2682.6957952797275: 42.41613741580188, 0.009169567101298428
    Finished inversion with lambda=19306.977288832455: 42.805535385853844, 0.0012795524999554082
    Finished inversion with lambda=138949.5494373136: 42.86001467903106, 0.00017794969834396122
    Finished inversion with lambda=1000000.0: 42.867547117899804, 2.4727298323562565e-05




.. GENERATED FROM PYTHON SOURCE LINES 754-758

.. code-block:: Python


    # print all the lambdas
    lambdas





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    array([1.00000000e-06, 7.19685673e-06, 5.17947468e-05, 3.72759372e-04,
           2.68269580e-03, 1.93069773e-02, 1.38949549e-01, 1.00000000e+00,
           7.19685673e+00, 5.17947468e+01, 3.72759372e+02, 2.68269580e+03,
           1.93069773e+04, 1.38949549e+05, 1.00000000e+06])



.. GENERATED FROM PYTHON SOURCE LINES 763-765

**Plot L-curve**


.. GENERATED FROM PYTHON SOURCE LINES 765-774

.. code-block:: Python


    # plot the L-curve
    res_norm, reg_norm = l_curve_points
    plt.plot(reg_norm, res_norm, '.-')
    plt.xlabel(r'Norm of regularization term $||Wm||_2$')
    plt.ylabel(r'Norm of residual $||g(m)-d||_2$')
    for i in range(0, len(lambdas), 2):
        plt.annotate(f'{lambdas[i]:.1e}', (reg_norm[i], res_norm[i]), fontsize=8)




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_007.png
   :alt: surface wave receiver function joint
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_007.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 779-782

Optimisation with damping
~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 782-796

.. code-block:: Python


    lamda = 1

    kwargs = {
        "fwd_funcs": fwd_funcs, 
        "d_obs_list": d_obs_list, 
        "lamda": lamda
    }
    joint_field_problem = cofi.BaseProblem()
    joint_field_problem.set_objective(my_objective, kwargs=kwargs)
    joint_field_problem.set_gradient(my_objective_gradient, kwargs=kwargs)
    joint_field_problem.set_hessian(my_objective_hessian, kwargs=kwargs)
    joint_field_problem.set_initial_model(init_model)








.. GENERATED FROM PYTHON SOURCE LINES 801-803

**Define ``Inversion`` and run**


.. GENERATED FROM PYTHON SOURCE LINES 803-807

.. code-block:: Python


    inv_optimiser_field = cofi.Inversion(joint_field_problem, inv_options_optimiser)
    inv_res_optimiser_field = inv_optimiser_field.run()








.. GENERATED FROM PYTHON SOURCE LINES 812-814

**Plot results**


.. GENERATED FROM PYTHON SOURCE LINES 814-849

.. code-block:: Python


    _, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4), gridspec_kw={'width_ratios': [1, 2.5]})

    ax1.set_ylim(100)

    plot_model(inv_res_optimiser_field.model, ax=ax1, color="green", alpha=1, 
               label="model inverted from field data")
    plot_model(ref_good_model, ax=ax1, color="red", alpha=1, 
               label="reference good model")
    plot_model(init_model, ax=ax1, alpha=1, lw=1.5, color="purple", 
               label="initial model for damped solution")

    field_d_periods_logspace = np.logspace(
        np.log(np.min(field_d_periods)), 
        np.log(np.max(field_d_periods+1)), 
        60, 
        base=np.e, 
    )

    plot_sw_data(rayleigh_field_d_obs, field_d_periods, ax=ax2, color="orange", s=5, scatter=True, 
                 label="d_obs")
    plot_sw_data(forward_sw_interp(inv_res_optimiser_field.model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, color="green", 
                 label="d_pred from inverted model")
    plot_sw_data(forward_sw_interp(ref_good_model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, color="red", 
                 label="d_pred from reference good model")
    plot_sw_data(forward_sw_interp(init_model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, 
                 alpha=1, lw=1.5, linestyle="--", color="purple", 
                 label="d_pred from initial model")

    ax1.legend(loc="lower center", bbox_to_anchor=(0.5, -0.4))
    ax2.legend(loc="lower center", bbox_to_anchor=(0.5, -0.46));




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_008.png
   :alt: model, surface wave data
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f8250313ac0>



.. GENERATED FROM PYTHON SOURCE LINES 851-873

.. code-block:: Python


    all_rf_dpred = []
    all_rf_dpred_init_m = []

    for gauss, ray_param in zip(all_gauss, all_ray_params):
        dpred = forward_rf_interp(inv_res_optimiser_field.model, gauss, ray_param)
        all_rf_dpred.append(dpred)
        dpred_init_m = forward_rf_interp(init_model, gauss, ray_param)
        all_rf_dpred_init_m.append(dpred_init_m)

    axes = plot_rf_field_data(all_rf_dpred, all_gauss, all_ray_params, rf_field_times,
                              color="darkblue", linestyle="dashed", 
                              label="d_pred from inverted model")
    plot_rf_field_data(all_rf_dpred_init_m, all_gauss, all_ray_params, rf_field_times,
                       axes=axes, color="gray",
                       label="d_pred from starting model")
    plot_rf_field_data(all_rf_field_dobs, all_gauss, all_ray_params, rf_field_times,
                       axes=axes, color="brown", linestyle="dashed",
                       label="d_obs")

    axes[-1,-1].legend(loc="lower center", bbox_to_anchor=(0.5, -2.5));




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_009.png
   :alt: ray (s/km) = 0.0716, gauss = 1.0, ray (s/km) = 0.0751, gauss = 1.0, ray (s/km) = 0.0705, gauss = 1.0, ray (s/km) = 0.0713, gauss = 2.5, ray (s/km) = 0.0738, gauss = 1.0, ray (s/km) = 0.0658, gauss = 2.5, ray (s/km) = 0.0698, gauss = 1.0, ray (s/km) = 0.0665, gauss = 1.0, ray (s/km) = 0.0698, gauss = 2.5, ray (s/km) = 0.0746, gauss = 1.0, ray (s/km) = 0.076, gauss = 1.0, ray (s/km) = 0.069, gauss = 2.5, ray (s/km) = 0.0687, gauss = 2.5, ray (s/km) = 0.0698, gauss = 2.5, ray (s/km) = 0.0746, gauss = 1.0, ray (s/km) = 0.0705, gauss = 2.5, ray (s/km) = 0.069, gauss = 1.0, ray (s/km) = 0.0724, gauss = 1.0, ray (s/km) = 0.0658, gauss = 1.0, ray (s/km) = 0.0713, gauss = 1.0, ray (s/km) = 0.0724, gauss = 2.5, ray (s/km) = 0.0687, gauss = 1.0, ray (s/km) = 0.0665, gauss = 2.5, ray (s/km) = 0.0716, gauss = 2.5, ray (s/km) = 0.0787, gauss = 1.0, ray (s/km) = 0.07, gauss = 1.0, ray (s/km) = 0.0732, gauss = 1.0, ray (s/km) = 0.0724, gauss = 1.0, ray (s/km) = 0.0704, gauss = 1.0, ray (s/km) = 0.0724, gauss = 2.5, ray (s/km) = 0.0698, gauss = 1.0, ray (s/km) = 0.0746, gauss = 2.5, ray (s/km) = 0.0739, gauss = 2.5, ray (s/km) = 0.0739, gauss = 1.0, ray (s/km) = 0.0738, gauss = 2.5, ray (s/km) = 0.0716, gauss = 1.0, ray (s/km) = 0.0751, gauss = 2.5, ray (s/km) = 0.076, gauss = 2.5, ray (s/km) = 0.07, gauss = 2.5
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <matplotlib.legend.Legend object at 0x7f824b8af5b0>



.. GENERATED FROM PYTHON SOURCE LINES 878-881

Fixed-dimensional sampling
--------------------------


.. GENERATED FROM PYTHON SOURCE LINES 884-886

**Prepare ``BaseProblem`` for fixed-dimensional sampling**


.. GENERATED FROM PYTHON SOURCE LINES 886-902

.. code-block:: Python


    thick_min = 3
    thick_max = 10
    vs_min = 2
    vs_max = 5

    def my_log_prior(model):
        thicknesses, vs = split_layercake_model(model)
        thicknesses_out_of_bounds = (thicknesses < thick_min) | (thicknesses > thick_max)
        vs_out_of_bounds = (vs < vs_min) | (vs > vs_max)
        if np.any(thicknesses_out_of_bounds) or np.any(vs_out_of_bounds):
            return float("-inf")
        log_prior = - np.log(thick_max - thick_min) * len(thicknesses) \
                    - np.log(vs_max - vs_min) * len(vs)
        return log_prior








.. GENERATED FROM PYTHON SOURCE LINES 904-913

.. code-block:: Python


    # estimate the data noise
    rayleigh_dpred = forward_sw_interp(ref_good_model, field_d_periods)
    rayleigh_std = np.std(rayleigh_dpred - rayleigh_field_d_obs)
    rf_dpred_1_0 = forward_rf_interp(ref_good_model, 1, ray_param_1_0)
    rf_1_0_std = np.std(rf_dpred_1_0 - rf_field_dobs_1_0)
    rf_dpred_2_5 = forward_rf_interp(ref_good_model, 2.5, ray_param_2_5)
    rf_2_5_std = np.std(rf_dpred_2_5 - rf_field_dobs_2_5)








.. GENERATED FROM PYTHON SOURCE LINES 915-939

.. code-block:: Python


    # inverse data covariance matrix
    Cdinv_rayleigh = np.eye(len(rayleigh_field_d_obs)) / (rayleigh_std**2)
    Cdinv_rf_1_0 = np.eye(len(rf_field_dobs_1_0)) / (rf_1_0_std**2)
    Cdinv_rf_2_5 = np.eye(len(rf_field_dobs_2_5)) / (rf_2_5_std**2)

    Cdinv_list = [Cdinv_rayleigh, Cdinv_rf_1_0, Cdinv_rf_2_5]

    def my_log_likelihood(
        model, 
        fwd_funcs=fwd_funcs, 
        d_obs_list=d_obs_list, 
        Cdinv_list=Cdinv_list
    ):
        log_like_sum = 0
        for (fwd, fwd_kwargs), d_obs, Cdinv in zip(fwd_funcs, d_obs_list, Cdinv_list):
            try:
                d_pred = fwd(model, **fwd_kwargs)
            except:
                return float("-inf")
            residual = d_obs - d_pred
            log_like_sum += -0.5 * residual @ (Cdinv @ residual).T
        return log_like_sum








.. GENERATED FROM PYTHON SOURCE LINES 941-948

.. code-block:: Python


    n_walkers = 60

    my_walkers_start = np.ones((n_walkers, n_dims)) * inv_res_optimiser_field.model
    for i in range(n_walkers):
        my_walkers_start[i,:] += np.random.normal(0, 0.5, n_dims)








.. GENERATED FROM PYTHON SOURCE LINES 950-954

.. code-block:: Python


    joint_field_problem.set_log_prior(my_log_prior)
    joint_field_problem.set_log_likelihood(my_log_likelihood)








.. GENERATED FROM PYTHON SOURCE LINES 959-961

**Define ``InversionOptions``**


.. GENERATED FROM PYTHON SOURCE LINES 961-972

.. code-block:: Python


    inv_options_fixed_d_sampling = cofi.InversionOptions()
    inv_options_fixed_d_sampling.set_tool("emcee")
    inv_options_fixed_d_sampling.set_params(
        nwalkers=n_walkers,
        nsteps=20_000,
        initial_state=my_walkers_start,
        skip_initial_state_check=True,
        progress=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 977-979

**Define ``Inversion`` and run**


.. GENERATED FROM PYTHON SOURCE LINES 979-983

.. code-block:: Python


    inv_fixed_d_sampler_field = cofi.Inversion(joint_field_problem, inv_options_fixed_d_sampling)
    inv_res_fixed_d_sampler_field = inv_fixed_d_sampler_field.run()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/20000 [00:00<?, ?it/s]      0%|          | 90/20000 [00:00<00:22, 890.97it/s]      1%|          | 180/20000 [00:00<00:22, 894.41it/s]      1%|▏         | 270/20000 [00:00<00:22, 894.03it/s]      2%|▏         | 360/20000 [00:00<00:21, 895.85it/s]      2%|▏         | 450/20000 [00:00<00:21, 895.41it/s]      3%|▎         | 540/20000 [00:00<00:21, 895.00it/s]      3%|▎         | 630/20000 [00:00<00:21, 895.20it/s]      4%|▎         | 720/20000 [00:00<00:21, 894.50it/s]      4%|▍         | 810/20000 [00:00<00:21, 893.70it/s]      4%|▍         | 900/20000 [00:01<00:21, 894.28it/s]      5%|▍         | 990/20000 [00:01<00:21, 894.54it/s]      5%|▌         | 1080/20000 [00:01<00:21, 895.49it/s]      6%|▌         | 1170/20000 [00:01<00:21, 894.96it/s]      6%|▋         | 1260/20000 [00:01<00:20, 895.20it/s]      7%|▋         | 1350/20000 [00:01<00:20, 896.59it/s]      7%|▋         | 1440/20000 [00:01<00:20, 896.19it/s]      8%|▊         | 1530/20000 [00:01<00:20, 895.32it/s]      8%|▊         | 1620/20000 [00:01<00:20, 895.57it/s]      9%|▊         | 1710/20000 [00:01<00:20, 895.96it/s]      9%|▉         | 1800/20000 [00:02<00:20, 896.93it/s]      9%|▉         | 1890/20000 [00:02<00:20, 895.02it/s]     10%|▉         | 1980/20000 [00:02<00:20, 895.13it/s]     10%|█         | 2070/20000 [00:02<00:20, 895.78it/s]     11%|█         | 2160/20000 [00:02<00:19, 895.24it/s]     11%|█▏        | 2250/20000 [00:02<00:19, 895.32it/s]     12%|█▏        | 2340/20000 [00:02<00:19, 895.04it/s]     12%|█▏        | 2430/20000 [00:02<00:19, 895.66it/s]     13%|█▎        | 2520/20000 [00:02<00:19, 894.46it/s]     13%|█▎        | 2610/20000 [00:02<00:19, 893.81it/s]     14%|█▎        | 2700/20000 [00:03<00:19, 894.64it/s]     14%|█▍        | 2790/20000 [00:03<00:19, 894.52it/s]     14%|█▍        | 2880/20000 [00:03<00:19, 894.37it/s]     15%|█▍        | 2970/20000 [00:03<00:19, 894.77it/s]     15%|█▌        | 3060/20000 [00:03<00:18, 895.71it/s]     16%|█▌        | 3150/20000 [00:03<00:18, 895.14it/s]     16%|█▌        | 3240/20000 [00:03<00:18, 893.89it/s]     17%|█▋        | 3330/20000 [00:03<00:18, 894.02it/s]     17%|█▋        | 3420/20000 [00:03<00:18, 894.50it/s]     18%|█▊        | 3510/20000 [00:03<00:18, 893.14it/s]     18%|█▊        | 3600/20000 [00:04<00:18, 889.61it/s]     18%|█▊        | 3690/20000 [00:04<00:18, 889.84it/s]     19%|█▉        | 3780/20000 [00:04<00:18, 890.64it/s]     19%|█▉        | 3870/20000 [00:04<00:18, 891.50it/s]     20%|█▉        | 3960/20000 [00:04<00:17, 891.44it/s]     20%|██        | 4050/20000 [00:04<00:17, 891.20it/s]     21%|██        | 4140/20000 [00:04<00:17, 891.80it/s]     21%|██        | 4230/20000 [00:04<00:17, 891.50it/s]     22%|██▏       | 4320/20000 [00:04<00:17, 890.87it/s]     22%|██▏       | 4410/20000 [00:04<00:17, 891.79it/s]     22%|██▎       | 4500/20000 [00:05<00:17, 891.86it/s]     23%|██▎       | 4590/20000 [00:05<00:17, 892.60it/s]     23%|██▎       | 4680/20000 [00:05<00:17, 893.47it/s]     24%|██▍       | 4770/20000 [00:05<00:17, 894.57it/s]     24%|██▍       | 4860/20000 [00:05<00:16, 893.94it/s]     25%|██▍       | 4950/20000 [00:05<00:16, 893.56it/s]     25%|██▌       | 5040/20000 [00:05<00:16, 894.40it/s]     26%|██▌       | 5130/20000 [00:05<00:16, 892.81it/s]     26%|██▌       | 5220/20000 [00:05<00:16, 891.71it/s]     27%|██▋       | 5310/20000 [00:05<00:16, 891.22it/s]     27%|██▋       | 5400/20000 [00:06<00:16, 892.44it/s]     27%|██▋       | 5490/20000 [00:06<00:16, 892.89it/s]     28%|██▊       | 5580/20000 [00:06<00:16, 892.90it/s]     28%|██▊       | 5670/20000 [00:06<00:16, 893.75it/s]     29%|██▉       | 5760/20000 [00:06<00:15, 894.56it/s]     29%|██▉       | 5850/20000 [00:06<00:15, 893.43it/s]     30%|██▉       | 5940/20000 [00:06<00:15, 893.50it/s]     30%|███       | 6030/20000 [00:06<00:15, 893.74it/s]     31%|███       | 6120/20000 [00:06<00:15, 894.47it/s]     31%|███       | 6210/20000 [00:06<00:15, 888.64it/s]     32%|███▏      | 6300/20000 [00:07<00:15, 890.39it/s]     32%|███▏      | 6390/20000 [00:07<00:15, 892.08it/s]     32%|███▏      | 6480/20000 [00:07<00:15, 891.99it/s]     33%|███▎      | 6570/20000 [00:07<00:15, 892.48it/s]     33%|███▎      | 6660/20000 [00:07<00:14, 892.71it/s]     34%|███▍      | 6750/20000 [00:07<00:14, 893.75it/s]     34%|███▍      | 6840/20000 [00:07<00:14, 894.60it/s]     35%|███▍      | 6930/20000 [00:07<00:14, 894.94it/s]     35%|███▌      | 7020/20000 [00:07<00:14, 893.66it/s]     36%|███▌      | 7110/20000 [00:07<00:14, 892.79it/s]     36%|███▌      | 7200/20000 [00:08<00:14, 892.83it/s]     36%|███▋      | 7290/20000 [00:08<00:14, 892.08it/s]     37%|███▋      | 7380/20000 [00:08<00:14, 891.98it/s]     37%|███▋      | 7470/20000 [00:08<00:14, 892.20it/s]     38%|███▊      | 7560/20000 [00:08<00:13, 893.57it/s]     38%|███▊      | 7650/20000 [00:08<00:13, 893.92it/s]     39%|███▊      | 7740/20000 [00:08<00:13, 893.74it/s]     39%|███▉      | 7830/20000 [00:08<00:13, 894.50it/s]     40%|███▉      | 7920/20000 [00:08<00:13, 894.50it/s]     40%|████      | 8010/20000 [00:08<00:13, 894.65it/s]     40%|████      | 8100/20000 [00:09<00:13, 894.61it/s]     41%|████      | 8190/20000 [00:09<00:13, 895.16it/s]     41%|████▏     | 8280/20000 [00:09<00:13, 893.65it/s]     42%|████▏     | 8370/20000 [00:09<00:13, 893.73it/s]     42%|████▏     | 8460/20000 [00:09<00:12, 894.30it/s]     43%|████▎     | 8550/20000 [00:09<00:12, 893.54it/s]     43%|████▎     | 8640/20000 [00:09<00:12, 894.13it/s]     44%|████▎     | 8730/20000 [00:09<00:12, 894.64it/s]     44%|████▍     | 8820/20000 [00:09<00:12, 892.46it/s]     45%|████▍     | 8910/20000 [00:09<00:12, 891.24it/s]     45%|████▌     | 9000/20000 [00:10<00:12, 892.58it/s]     45%|████▌     | 9090/20000 [00:10<00:12, 893.05it/s]     46%|████▌     | 9180/20000 [00:10<00:12, 894.35it/s]     46%|████▋     | 9270/20000 [00:10<00:11, 894.53it/s]     47%|████▋     | 9360/20000 [00:10<00:11, 894.69it/s]     47%|████▋     | 9450/20000 [00:10<00:11, 893.78it/s]     48%|████▊     | 9540/20000 [00:10<00:11, 894.39it/s]     48%|████▊     | 9630/20000 [00:10<00:11, 895.23it/s]     49%|████▊     | 9720/20000 [00:10<00:11, 894.28it/s]     49%|████▉     | 9810/20000 [00:10<00:11, 893.66it/s]     50%|████▉     | 9900/20000 [00:11<00:11, 892.87it/s]     50%|████▉     | 9990/20000 [00:11<00:11, 893.96it/s]     50%|█████     | 10080/20000 [00:11<00:11, 894.22it/s]     51%|█████     | 10170/20000 [00:11<00:10, 894.18it/s]     51%|█████▏    | 10260/20000 [00:11<00:10, 894.59it/s]     52%|█████▏    | 10350/20000 [00:11<00:10, 894.65it/s]     52%|█████▏    | 10440/20000 [00:11<00:10, 894.82it/s]     53%|█████▎    | 10530/20000 [00:11<00:10, 895.58it/s]     53%|█████▎    | 10620/20000 [00:11<00:10, 891.91it/s]     54%|█████▎    | 10710/20000 [00:11<00:10, 891.72it/s]     54%|█████▍    | 10800/20000 [00:12<00:10, 884.92it/s]     54%|█████▍    | 10889/20000 [00:12<00:10, 883.28it/s]     55%|█████▍    | 10978/20000 [00:12<00:10, 883.35it/s]     55%|█████▌    | 11067/20000 [00:12<00:10, 880.53it/s]     56%|█████▌    | 11157/20000 [00:12<00:10, 884.05it/s]     56%|█████▌    | 11247/20000 [00:12<00:09, 886.20it/s]     57%|█████▋    | 11337/20000 [00:12<00:09, 889.36it/s]     57%|█████▋    | 11427/20000 [00:12<00:09, 891.22it/s]     58%|█████▊    | 11517/20000 [00:12<00:09, 892.28it/s]     58%|█████▊    | 11607/20000 [00:12<00:09, 892.47it/s]     58%|█████▊    | 11697/20000 [00:13<00:09, 887.84it/s]     59%|█████▉    | 11787/20000 [00:13<00:09, 891.03it/s]     59%|█████▉    | 11877/20000 [00:13<00:09, 892.44it/s]     60%|█████▉    | 11967/20000 [00:13<00:09, 892.52it/s]     60%|██████    | 12057/20000 [00:13<00:08, 894.18it/s]     61%|██████    | 12147/20000 [00:13<00:08, 894.46it/s]     61%|██████    | 12237/20000 [00:13<00:08, 895.45it/s]     62%|██████▏   | 12327/20000 [00:13<00:08, 895.46it/s]     62%|██████▏   | 12417/20000 [00:13<00:08, 894.72it/s]     63%|██████▎   | 12507/20000 [00:14<00:08, 895.62it/s]     63%|██████▎   | 12597/20000 [00:14<00:08, 895.59it/s]     63%|██████▎   | 12687/20000 [00:14<00:08, 895.23it/s]     64%|██████▍   | 12777/20000 [00:14<00:08, 895.69it/s]     64%|██████▍   | 12867/20000 [00:14<00:07, 894.99it/s]     65%|██████▍   | 12957/20000 [00:14<00:07, 894.64it/s]     65%|██████▌   | 13047/20000 [00:14<00:07, 894.78it/s]     66%|██████▌   | 13137/20000 [00:14<00:07, 893.74it/s]     66%|██████▌   | 13227/20000 [00:14<00:07, 893.29it/s]     67%|██████▋   | 13317/20000 [00:14<00:07, 892.04it/s]     67%|██████▋   | 13407/20000 [00:15<00:07, 892.58it/s]     67%|██████▋   | 13497/20000 [00:15<00:07, 892.81it/s]     68%|██████▊   | 13587/20000 [00:15<00:07, 893.53it/s]     68%|██████▊   | 13677/20000 [00:15<00:07, 894.13it/s]     69%|██████▉   | 13767/20000 [00:15<00:06, 893.27it/s]     69%|██████▉   | 13857/20000 [00:15<00:06, 894.15it/s]     70%|██████▉   | 13947/20000 [00:15<00:06, 892.75it/s]     70%|███████   | 14037/20000 [00:15<00:06, 893.87it/s]     71%|███████   | 14127/20000 [00:15<00:06, 894.31it/s]     71%|███████   | 14217/20000 [00:15<00:06, 893.86it/s]     72%|███████▏  | 14307/20000 [00:16<00:06, 892.50it/s]     72%|███████▏  | 14397/20000 [00:16<00:06, 892.94it/s]     72%|███████▏  | 14487/20000 [00:16<00:06, 893.01it/s]     73%|███████▎  | 14577/20000 [00:16<00:06, 893.69it/s]     73%|███████▎  | 14667/20000 [00:16<00:05, 893.26it/s]     74%|███████▍  | 14757/20000 [00:16<00:05, 893.69it/s]     74%|███████▍  | 14847/20000 [00:16<00:05, 893.31it/s]     75%|███████▍  | 14937/20000 [00:16<00:05, 893.72it/s]     75%|███████▌  | 15027/20000 [00:16<00:05, 893.95it/s]     76%|███████▌  | 15117/20000 [00:16<00:05, 892.02it/s]     76%|███████▌  | 15207/20000 [00:17<00:05, 893.22it/s]     76%|███████▋  | 15297/20000 [00:17<00:05, 893.02it/s]     77%|███████▋  | 15387/20000 [00:17<00:05, 892.78it/s]     77%|███████▋  | 15477/20000 [00:17<00:05, 893.77it/s]     78%|███████▊  | 15567/20000 [00:17<00:04, 893.98it/s]     78%|███████▊  | 15657/20000 [00:17<00:04, 895.16it/s]     79%|███████▊  | 15747/20000 [00:17<00:04, 894.76it/s]     79%|███████▉  | 15837/20000 [00:17<00:04, 894.45it/s]     80%|███████▉  | 15927/20000 [00:17<00:04, 894.44it/s]     80%|████████  | 16017/20000 [00:17<00:04, 894.09it/s]     81%|████████  | 16107/20000 [00:18<00:04, 893.20it/s]     81%|████████  | 16197/20000 [00:18<00:04, 892.77it/s]     81%|████████▏ | 16287/20000 [00:18<00:04, 893.57it/s]     82%|████████▏ | 16377/20000 [00:18<00:04, 892.35it/s]     82%|████████▏ | 16467/20000 [00:18<00:03, 893.07it/s]     83%|████████▎ | 16557/20000 [00:18<00:03, 893.89it/s]     83%|████████▎ | 16647/20000 [00:18<00:03, 893.48it/s]     84%|████████▎ | 16737/20000 [00:18<00:03, 892.56it/s]     84%|████████▍ | 16827/20000 [00:18<00:03, 892.67it/s]     85%|████████▍ | 16917/20000 [00:18<00:03, 892.42it/s]     85%|████████▌ | 17007/20000 [00:19<00:03, 891.63it/s]     85%|████████▌ | 17097/20000 [00:19<00:03, 891.61it/s]     86%|████████▌ | 17187/20000 [00:19<00:03, 891.87it/s]     86%|████████▋ | 17277/20000 [00:19<00:03, 892.43it/s]     87%|████████▋ | 17367/20000 [00:19<00:02, 893.63it/s]     87%|████████▋ | 17457/20000 [00:19<00:02, 894.05it/s]     88%|████████▊ | 17547/20000 [00:19<00:02, 893.73it/s]     88%|████████▊ | 17637/20000 [00:19<00:02, 893.56it/s]     89%|████████▊ | 17727/20000 [00:19<00:02, 894.27it/s]     89%|████████▉ | 17817/20000 [00:19<00:02, 893.38it/s]     90%|████████▉ | 17907/20000 [00:20<00:02, 893.27it/s]     90%|████████▉ | 17997/20000 [00:20<00:02, 893.35it/s]     90%|█████████ | 18087/20000 [00:20<00:02, 893.47it/s]     91%|█████████ | 18177/20000 [00:20<00:02, 893.38it/s]     91%|█████████▏| 18267/20000 [00:20<00:01, 893.01it/s]     92%|█████████▏| 18357/20000 [00:20<00:01, 892.26it/s]     92%|█████████▏| 18447/20000 [00:20<00:01, 891.26it/s]     93%|█████████▎| 18537/20000 [00:20<00:01, 892.33it/s]     93%|█████████▎| 18627/20000 [00:20<00:01, 892.82it/s]     94%|█████████▎| 18717/20000 [00:20<00:01, 893.07it/s]     94%|█████████▍| 18807/20000 [00:21<00:01, 892.31it/s]     94%|█████████▍| 18897/20000 [00:21<00:01, 892.51it/s]     95%|█████████▍| 18987/20000 [00:21<00:01, 892.83it/s]     95%|█████████▌| 19077/20000 [00:21<00:01, 893.45it/s]     96%|█████████▌| 19167/20000 [00:21<00:00, 894.28it/s]     96%|█████████▋| 19257/20000 [00:21<00:00, 895.02it/s]     97%|█████████▋| 19347/20000 [00:21<00:00, 894.26it/s]     97%|█████████▋| 19437/20000 [00:21<00:00, 894.35it/s]     98%|█████████▊| 19527/20000 [00:21<00:00, 894.34it/s]     98%|█████████▊| 19617/20000 [00:21<00:00, 893.73it/s]     99%|█████████▊| 19707/20000 [00:22<00:00, 894.12it/s]     99%|█████████▉| 19797/20000 [00:22<00:00, 892.11it/s]     99%|█████████▉| 19887/20000 [00:22<00:00, 893.50it/s]    100%|█████████▉| 19977/20000 [00:22<00:00, 894.03it/s]    100%|██████████| 20000/20000 [00:22<00:00, 893.28it/s]




.. GENERATED FROM PYTHON SOURCE LINES 985-995

.. code-block:: Python


    labels_v = [f"v{i}" for i in range(n_dims//2+1)]
    labels_t = [f"t{i}" for i in range(n_dims//2)]
    labels = [0] * n_dims
    labels[::2] = labels_v
    labels[1::2] = labels_t

    sampler = inv_res_fixed_d_sampler_field.sampler
    az_idata = az.from_emcee(sampler, var_names=labels)








.. GENERATED FROM PYTHON SOURCE LINES 997-1000

.. code-block:: Python


    az_idata.get("posterior")






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:  (chain: 60, draw: 20000)
    Coordinates:
      * chain    (chain) int64 0 1 2 3 4 5 6 7 8 9 ... 50 51 52 53 54 55 56 57 58 59
      * draw     (draw) int64 0 1 2 3 4 5 6 ... 19994 19995 19996 19997 19998 19999
    Data variables: (12/29)
        v0       (chain, draw) float64 3.621 3.621 3.621 3.621 ... 3.463 3.463 3.463
        t0       (chain, draw) float64 11.4 11.4 11.4 11.4 ... 9.716 9.716 9.716
        v1       (chain, draw) float64 4.257 4.257 4.257 4.257 ... 3.374 3.374 3.374
        t1       (chain, draw) float64 9.68 9.68 9.68 9.68 ... 9.25 9.25 9.25 9.25
        v2       (chain, draw) float64 4.648 4.648 4.648 4.648 ... 3.632 3.632 3.632
        t2       (chain, draw) float64 10.49 10.49 10.49 10.49 ... 10.22 10.22 10.22
        ...       ...
        t11      (chain, draw) float64 10.22 10.22 10.22 10.22 ... 11.28 11.28 11.28
        v12      (chain, draw) float64 4.057 4.057 4.057 4.057 ... 5.008 5.008 5.008
        t12      (chain, draw) float64 8.976 8.976 8.976 8.976 ... 10.8 10.8 10.8
        v13      (chain, draw) float64 3.612 3.612 3.612 3.612 ... 4.506 4.506 4.506
        t13      (chain, draw) float64 10.56 10.56 10.56 10.56 ... 9.924 9.924 9.924
        v14      (chain, draw) float64 5.01 5.01 5.01 5.01 ... 5.152 5.152 5.152
    Attributes:
        created_at:                 2024-04-17T06:14:50.009163
        arviz_version:              0.17.0
        inference_library:          emcee
        inference_library_version:  3.1.4</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-5a7628e9-a4d5-464d-9f95-682401f8545d' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-5a7628e9-a4d5-464d-9f95-682401f8545d' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>chain</span>: 60</li><li><span class='xr-has-index'>draw</span>: 20000</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-2df5718f-e2fb-4ca9-b68b-f60299216ed0' class='xr-section-summary-in' type='checkbox'  checked><label for='section-2df5718f-e2fb-4ca9-b68b-f60299216ed0' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>chain</span></div><div class='xr-var-dims'>(chain)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 4 5 6 ... 54 55 56 57 58 59</div><input id='attrs-834b241f-b712-46c0-bfea-331a5eba936b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-834b241f-b712-46c0-bfea-331a5eba936b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b665024c-2c9d-4bb6-b715-26a3bee93c3a' class='xr-var-data-in' type='checkbox'><label for='data-b665024c-2c9d-4bb6-b715-26a3bee93c3a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
           18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
           36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
           54, 55, 56, 57, 58, 59])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>draw</span></div><div class='xr-var-dims'>(draw)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 ... 19996 19997 19998 19999</div><input id='attrs-14d2c90c-00e9-4d8c-ae05-051a07f9ee5a' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-14d2c90c-00e9-4d8c-ae05-051a07f9ee5a' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-067c6118-dcb6-42a4-af33-da4b4bba8b8d' class='xr-var-data-in' type='checkbox'><label for='data-067c6118-dcb6-42a4-af33-da4b4bba8b8d' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([    0,     1,     2, ..., 19997, 19998, 19999])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-86fe607e-4ade-4533-a211-ca1cb58ffea6' class='xr-section-summary-in' type='checkbox'  ><label for='section-86fe607e-4ade-4533-a211-ca1cb58ffea6' class='xr-section-summary' >Data variables: <span>(29)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>v0</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>3.621 3.621 3.621 ... 3.463 3.463</div><input id='attrs-04581d30-8d07-4c2e-bec5-423fc47077a1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-04581d30-8d07-4c2e-bec5-423fc47077a1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-43d809be-bf6a-4901-b8b5-356b0ffd6256' class='xr-var-data-in' type='checkbox'><label for='data-43d809be-bf6a-4901-b8b5-356b0ffd6256' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[3.62057542, 3.62057542, 3.62057542, ..., 3.62057542, 3.62057542,
            3.62057542],
           [3.51867892, 3.51867892, 3.51867892, ..., 3.51867892, 3.51867892,
            3.51867892],
           [4.37369839, 4.37369839, 4.37369839, ..., 4.37369839, 4.37369839,
            4.37369839],
           ...,
           [3.5944777 , 3.5944777 , 3.5944777 , ..., 3.5944777 , 3.5944777 ,
            3.5944777 ],
           [3.31646608, 3.31646608, 3.31646608, ..., 3.31646608, 3.31646608,
            3.31646608],
           [3.46313263, 3.46313263, 3.46313263, ..., 3.46313263, 3.46313263,
            3.46313263]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t0</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>11.4 11.4 11.4 ... 9.716 9.716</div><input id='attrs-305896f0-7fc5-4bf8-aed4-4c0822347e11' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-305896f0-7fc5-4bf8-aed4-4c0822347e11' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bddc5cdc-1793-44a6-832b-6706e42b88a5' class='xr-var-data-in' type='checkbox'><label for='data-bddc5cdc-1793-44a6-832b-6706e42b88a5' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[11.39623042, 11.39623042, 11.39623042, ..., 11.39623042,
            11.39623042, 11.39623042],
           [10.46064794, 10.46064794, 10.46064794, ..., 10.46064794,
            10.46064794, 10.46064794],
           [ 9.40860346,  9.40860346,  9.40860346, ...,  9.40860346,
             9.40860346,  9.40860346],
           ...,
           [10.34098604, 10.34098604, 10.34098604, ..., 10.34098604,
            10.34098604, 10.34098604],
           [10.02233842, 10.02233842, 10.02233842, ..., 10.02233842,
            10.02233842, 10.02233842],
           [ 9.71601313,  9.71601313,  9.71601313, ...,  9.71601313,
             9.71601313,  9.71601313]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v1</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.257 4.257 4.257 ... 3.374 3.374</div><input id='attrs-ed9438e8-d084-40e3-af26-3bca3bbfc3e0' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ed9438e8-d084-40e3-af26-3bca3bbfc3e0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3ad63b66-6644-4bd6-acb1-38c86935cc2e' class='xr-var-data-in' type='checkbox'><label for='data-3ad63b66-6644-4bd6-acb1-38c86935cc2e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[4.2569962 , 4.2569962 , 4.2569962 , ..., 4.2569962 , 4.2569962 ,
            4.2569962 ],
           [3.67485363, 3.67485363, 3.67485363, ..., 3.67485363, 3.67485363,
            3.67485363],
           [3.4084056 , 3.4084056 , 3.4084056 , ..., 3.4084056 , 3.4084056 ,
            3.4084056 ],
           ...,
           [3.03516051, 3.03516051, 3.03516051, ..., 3.03516051, 3.03516051,
            3.03516051],
           [3.24665584, 3.24665584, 3.24665584, ..., 3.24665584, 3.24665584,
            3.24665584],
           [3.37438722, 3.37438722, 3.37438722, ..., 3.37438722, 3.37438722,
            3.37438722]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t1</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>9.68 9.68 9.68 ... 9.25 9.25 9.25</div><input id='attrs-e746550e-1439-4326-ac48-700634fa28d0' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e746550e-1439-4326-ac48-700634fa28d0' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-276c2076-61a6-44ad-9ca8-4d31cf095a06' class='xr-var-data-in' type='checkbox'><label for='data-276c2076-61a6-44ad-9ca8-4d31cf095a06' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[ 9.67989409,  9.67989409,  9.67989409, ...,  9.67989409,
             9.67989409,  9.67989409],
           [ 9.63138586,  9.63138586,  9.63138586, ...,  9.63138586,
             9.63138586,  9.63138586],
           [10.81647533, 10.81647533, 10.81647533, ..., 10.81647533,
            10.81647533, 10.81647533],
           ...,
           [ 9.77265348,  9.77265348,  9.77265348, ...,  9.77265348,
             9.77265348,  9.77265348],
           [ 9.96468541,  9.96468541,  9.96468541, ...,  9.96468541,
             9.96468541,  9.96468541],
           [ 9.24985627,  9.24985627,  9.24985627, ...,  9.24985627,
             9.24985627,  9.24985627]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v2</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.648 4.648 4.648 ... 3.632 3.632</div><input id='attrs-2f549db9-4109-4591-b2d7-99f03e9275ec' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-2f549db9-4109-4591-b2d7-99f03e9275ec' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ff36de11-bd5f-4a18-921f-a88b9255b606' class='xr-var-data-in' type='checkbox'><label for='data-ff36de11-bd5f-4a18-921f-a88b9255b606' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[4.64765504, 4.64765504, 4.64765504, ..., 4.64765504, 4.64765504,
            4.64765504],
           [4.32028184, 4.32028184, 4.32028184, ..., 4.32028184, 4.32028184,
            4.32028184],
           [3.40130277, 3.40130277, 3.40130277, ..., 3.40130277, 3.40130277,
            3.40130277],
           ...,
           [2.80604793, 2.80604793, 2.80604793, ..., 2.80604793, 2.80604793,
            2.80604793],
           [4.11659637, 4.11659637, 4.11659637, ..., 4.11659637, 4.11659637,
            4.11659637],
           [3.63244917, 3.63244917, 3.63244917, ..., 3.63244917, 3.63244917,
            3.63244917]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t2</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.49 10.49 10.49 ... 10.22 10.22</div><input id='attrs-86ed38a5-2f95-452c-ac38-38ffd7655598' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-86ed38a5-2f95-452c-ac38-38ffd7655598' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-14268498-c7b1-4552-ac9a-5aacb3ae08da' class='xr-var-data-in' type='checkbox'><label for='data-14268498-c7b1-4552-ac9a-5aacb3ae08da' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.49437135, 10.49437135, 10.49437135, ..., 10.49437135,
            10.49437135, 10.49437135],
           [10.71626546, 10.71626546, 10.71626546, ..., 10.71626546,
            10.71626546, 10.71626546],
           [10.52768864, 10.52768864, 10.52768864, ..., 10.52768864,
            10.52768864, 10.52768864],
           ...,
           [ 9.72986637,  9.72986637,  9.72986637, ...,  9.72986637,
             9.72986637,  9.72986637],
           [10.27525751, 10.27525751, 10.27525751, ..., 10.27525751,
            10.27525751, 10.27525751],
           [10.21639485, 10.21639485, 10.21639485, ..., 10.21639485,
            10.21639485, 10.21639485]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v3</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.441 4.441 4.441 ... 5.505 5.505</div><input id='attrs-1464d7f5-fbcb-4597-93bd-0f34e0ef2d16' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-1464d7f5-fbcb-4597-93bd-0f34e0ef2d16' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-2db0affd-4d92-4958-b95a-0be91fe7d0e0' class='xr-var-data-in' type='checkbox'><label for='data-2db0affd-4d92-4958-b95a-0be91fe7d0e0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[4.44088111, 4.44088111, 4.44088111, ..., 4.44088111, 4.44088111,
            4.44088111],
           [4.39582949, 4.39582949, 4.39582949, ..., 4.39582949, 4.39582949,
            4.39582949],
           [3.52468228, 3.52468228, 3.52468228, ..., 3.52468228, 3.52468228,
            3.52468228],
           ...,
           [3.92150034, 3.92150034, 3.92150034, ..., 3.92150034, 3.92150034,
            3.92150034],
           [4.81624913, 4.81624913, 4.81624913, ..., 4.81624913, 4.81624913,
            4.81624913],
           [5.50513   , 5.50513   , 5.50513   , ..., 5.50513   , 5.50513   ,
            5.50513   ]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t3</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.2 10.2 10.2 ... 9.717 9.717</div><input id='attrs-77df86fd-73c5-4b15-b19b-95bddf011a48' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-77df86fd-73c5-4b15-b19b-95bddf011a48' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f69519b1-3083-4b47-a135-5ec66bef3563' class='xr-var-data-in' type='checkbox'><label for='data-f69519b1-3083-4b47-a135-5ec66bef3563' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.20176338, 10.20176338, 10.20176338, ..., 10.20176338,
            10.20176338, 10.20176338],
           [10.28588399, 10.28588399, 10.28588399, ..., 10.28588399,
            10.28588399, 10.28588399],
           [10.58168777, 10.58168777, 10.58168777, ..., 10.58168777,
            10.58168777, 10.58168777],
           ...,
           [ 9.99815923,  9.99815923,  9.99815923, ...,  9.99815923,
             9.99815923,  9.99815923],
           [10.52618991, 10.52618991, 10.52618991, ..., 10.52618991,
            10.52618991, 10.52618991],
           [ 9.71740815,  9.71740815,  9.71740815, ...,  9.71740815,
             9.71740815,  9.71740815]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v4</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>3.345 3.345 3.345 ... 4.047 4.047</div><input id='attrs-ac3cb9c4-fec1-46ae-92ef-d49f641f6380' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-ac3cb9c4-fec1-46ae-92ef-d49f641f6380' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-84908147-3147-4eb4-8579-f7dec4e1fbd0' class='xr-var-data-in' type='checkbox'><label for='data-84908147-3147-4eb4-8579-f7dec4e1fbd0' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[3.34509552, 3.34509552, 3.34509552, ..., 3.34509552, 3.34509552,
            3.34509552],
           [2.85925392, 2.85925392, 2.85925392, ..., 2.85925392, 2.85925392,
            2.85925392],
           [4.80638232, 4.80638232, 4.80638232, ..., 4.80638232, 4.80638232,
            4.80638232],
           ...,
           [4.41042534, 4.41042534, 4.41042534, ..., 4.41042534, 4.41042534,
            4.41042534],
           [3.74914938, 3.74914938, 3.74914938, ..., 3.74914938, 3.74914938,
            3.74914938],
           [4.0471545 , 4.0471545 , 4.0471545 , ..., 4.0471545 , 4.0471545 ,
            4.0471545 ]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t4</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.55 10.55 10.55 ... 9.856 9.856</div><input id='attrs-b4bce76a-5973-4d1f-82c9-710c74833dd6' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-b4bce76a-5973-4d1f-82c9-710c74833dd6' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8e8d6ae8-bf4c-4077-ad16-a3e1d0ef4967' class='xr-var-data-in' type='checkbox'><label for='data-8e8d6ae8-bf4c-4077-ad16-a3e1d0ef4967' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.55253157, 10.55253157, 10.55253157, ..., 10.55253157,
            10.55253157, 10.55253157],
           [ 9.78210824,  9.78210824,  9.78210824, ...,  9.78210824,
             9.78210824,  9.78210824],
           [10.70520904, 10.70520904, 10.70520904, ..., 10.70520904,
            10.70520904, 10.70520904],
           ...,
           [ 9.83636435,  9.83636435,  9.83636435, ...,  9.83636435,
             9.83636435,  9.83636435],
           [10.04993996, 10.04993996, 10.04993996, ..., 10.04993996,
            10.04993996, 10.04993996],
           [ 9.85640216,  9.85640216,  9.85640216, ...,  9.85640216,
             9.85640216,  9.85640216]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v5</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.359 4.359 4.359 ... 3.691 3.691</div><input id='attrs-3ad1f0d9-9a1a-436f-979f-f8d2543beeb1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-3ad1f0d9-9a1a-436f-979f-f8d2543beeb1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d69f7a1b-4142-497a-8538-2b70752d8417' class='xr-var-data-in' type='checkbox'><label for='data-d69f7a1b-4142-497a-8538-2b70752d8417' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[4.35880113, 4.35880113, 4.35880113, ..., 4.35880113, 4.35880113,
            4.35880113],
           [3.46180632, 3.46180632, 3.46180632, ..., 3.46180632, 3.46180632,
            3.46180632],
           [4.23013712, 4.23013712, 4.23013712, ..., 4.23013712, 4.23013712,
            4.23013712],
           ...,
           [5.07772543, 5.07772543, 5.07772543, ..., 5.07772543, 5.07772543,
            5.07772543],
           [4.12658839, 4.12658839, 4.12658839, ..., 4.12658839, 4.12658839,
            4.12658839],
           [3.69122136, 3.69122136, 3.69122136, ..., 3.69122136, 3.69122136,
            3.69122136]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t5</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.02 10.02 10.02 ... 10.57 10.57</div><input id='attrs-18967311-07f5-40c7-b7d6-0dac72f818f1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-18967311-07f5-40c7-b7d6-0dac72f818f1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0a780182-41ec-4d59-b296-b91b45ec96fd' class='xr-var-data-in' type='checkbox'><label for='data-0a780182-41ec-4d59-b296-b91b45ec96fd' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.02079403, 10.02079403, 10.02079403, ..., 10.02079403,
            10.02079403, 10.02079403],
           [10.00551888, 10.00551888, 10.00551888, ..., 10.00551888,
            10.00551888, 10.00551888],
           [ 9.76644753,  9.76644753,  9.76644753, ...,  9.76644753,
             9.76644753,  9.76644753],
           ...,
           [10.04511333, 10.04511333, 10.04511333, ..., 10.04511333,
            10.04511333, 10.04511333],
           [ 9.40011376,  9.40011376,  9.40011376, ...,  9.40011376,
             9.40011376,  9.40011376],
           [10.56988825, 10.56988825, 10.56988825, ..., 10.56988825,
            10.56988825, 10.56988825]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v6</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.279 4.279 4.279 ... 4.401 4.401</div><input id='attrs-37061814-d64d-4cc8-9645-1509f9012be5' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-37061814-d64d-4cc8-9645-1509f9012be5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-1d50abb7-78ab-4a07-82ac-a65f0edbcd75' class='xr-var-data-in' type='checkbox'><label for='data-1d50abb7-78ab-4a07-82ac-a65f0edbcd75' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[4.27941309, 4.27941309, 4.27941309, ..., 4.27941309, 4.27941309,
            4.27941309],
           [4.00505574, 4.00505574, 4.00505574, ..., 4.00505574, 4.00505574,
            4.00505574],
           [3.86019628, 3.86019628, 3.86019628, ..., 3.86019628, 3.86019628,
            3.86019628],
           ...,
           [5.0695157 , 5.0695157 , 5.0695157 , ..., 5.0695157 , 5.0695157 ,
            5.0695157 ],
           [4.07829   , 4.07829   , 4.07829   , ..., 4.07829   , 4.07829   ,
            4.07829   ],
           [4.40144694, 4.40144694, 4.40144694, ..., 4.40144694, 4.40144694,
            4.40144694]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t6</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.1 10.1 10.1 ... 9.649 9.649</div><input id='attrs-134945e6-c138-49e5-8f4a-2dd17650c28e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-134945e6-c138-49e5-8f4a-2dd17650c28e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-4f1acd0b-2cf6-4e25-a202-82f88bddbf2e' class='xr-var-data-in' type='checkbox'><label for='data-4f1acd0b-2cf6-4e25-a202-82f88bddbf2e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.10143995, 10.10143995, 10.10143995, ..., 10.10143995,
            10.10143995, 10.10143995],
           [ 9.48442026,  9.48442026,  9.48442026, ...,  9.48442026,
             9.48442026,  9.48442026],
           [ 9.66312222,  9.66312222,  9.66312222, ...,  9.66312222,
             9.66312222,  9.66312222],
           ...,
           [10.33896202, 10.33896202, 10.33896202, ..., 10.33896202,
            10.33896202, 10.33896202],
           [ 9.67119464,  9.67119464,  9.67119464, ...,  9.67119464,
             9.67119464,  9.67119464],
           [ 9.64897969,  9.64897969,  9.64897969, ...,  9.64897969,
             9.64897969,  9.64897969]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v7</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>3.201 3.201 3.201 ... 4.542 4.542</div><input id='attrs-4bb4cfb3-eedf-451b-a3fd-d830ed1a57a7' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-4bb4cfb3-eedf-451b-a3fd-d830ed1a57a7' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-28600827-edb1-41e8-970d-7a4e10f3c14e' class='xr-var-data-in' type='checkbox'><label for='data-28600827-edb1-41e8-970d-7a4e10f3c14e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[3.20118758, 3.20118758, 3.20118758, ..., 3.20118758, 3.20118758,
            3.20118758],
           [4.4980566 , 4.4980566 , 4.4980566 , ..., 4.4980566 , 4.4980566 ,
            4.4980566 ],
           [3.04781514, 3.04781514, 3.04781514, ..., 3.04781514, 3.04781514,
            3.04781514],
           ...,
           [4.3262253 , 4.3262253 , 4.3262253 , ..., 4.3262253 , 4.3262253 ,
            4.3262253 ],
           [4.52387959, 4.52387959, 4.52387959, ..., 4.52387959, 4.52387959,
            4.52387959],
           [4.54178553, 4.54178553, 4.54178553, ..., 4.54178553, 4.54178553,
            4.54178553]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t7</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.57 10.57 10.57 ... 10.25 10.25</div><input id='attrs-0ad97861-3746-45aa-b002-7655242d03d2' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-0ad97861-3746-45aa-b002-7655242d03d2' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-905a613c-7cb1-49ae-a3c5-284a858c2a35' class='xr-var-data-in' type='checkbox'><label for='data-905a613c-7cb1-49ae-a3c5-284a858c2a35' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.57194675, 10.57194675, 10.57194675, ..., 10.57194675,
            10.57194675, 10.57194675],
           [10.39297936, 10.39297936, 10.39297936, ..., 10.39297936,
            10.39297936, 10.39297936],
           [ 9.90188612,  9.90188612,  9.90188612, ...,  9.90188612,
             9.90188612,  9.90188612],
           ...,
           [ 9.31241363,  9.31241363,  9.31241363, ...,  9.31241363,
             9.31241363,  9.31241363],
           [ 9.61435939,  9.61435939,  9.61435939, ...,  9.61435939,
             9.61435939,  9.61435939],
           [10.25200133, 10.25200133, 10.25200133, ..., 10.25200133,
            10.25200133, 10.25200133]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v8</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.245 4.245 4.245 ... 3.207 3.207</div><input id='attrs-1ca78008-d108-4683-8c99-343b7c42c0ee' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-1ca78008-d108-4683-8c99-343b7c42c0ee' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5e46daac-e7cb-44f0-903b-02e79458e0df' class='xr-var-data-in' type='checkbox'><label for='data-5e46daac-e7cb-44f0-903b-02e79458e0df' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[4.24514541, 4.24514541, 4.24514541, ..., 4.24514541, 4.24514541,
            4.24514541],
           [4.44118531, 4.44118531, 4.44118531, ..., 4.44118531, 4.44118531,
            4.44118531],
           [5.55381977, 5.55381977, 5.55381977, ..., 5.55381977, 5.55381977,
            5.55381977],
           ...,
           [4.42900162, 4.42900162, 4.42900162, ..., 4.42900162, 4.42900162,
            4.42900162],
           [4.85931186, 4.85931186, 4.85931186, ..., 4.85931186, 4.85931186,
            4.85931186],
           [3.20702116, 3.20702116, 3.20702116, ..., 3.20702116, 3.20702116,
            3.20702116]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t8</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.73 10.73 10.73 ... 9.542 9.542</div><input id='attrs-bfc3bbad-1633-4547-8b9a-eb0e68ead50f' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-bfc3bbad-1633-4547-8b9a-eb0e68ead50f' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-827f08e2-1ee5-4ad1-854e-1b44761f946a' class='xr-var-data-in' type='checkbox'><label for='data-827f08e2-1ee5-4ad1-854e-1b44761f946a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.73222626, 10.73222626, 10.73222626, ..., 10.73222626,
            10.73222626, 10.73222626],
           [10.16718218, 10.16718218, 10.16718218, ..., 10.16718218,
            10.16718218, 10.16718218],
           [ 9.59947556,  9.59947556,  9.59947556, ...,  9.59947556,
             9.59947556,  9.59947556],
           ...,
           [10.49758373, 10.49758373, 10.49758373, ..., 10.49758373,
            10.49758373, 10.49758373],
           [10.02101407, 10.02101407, 10.02101407, ..., 10.02101407,
            10.02101407, 10.02101407],
           [ 9.54203437,  9.54203437,  9.54203437, ...,  9.54203437,
             9.54203437,  9.54203437]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v9</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>5.307 5.307 5.307 ... 3.748 3.748</div><input id='attrs-cda41c2e-4678-4873-9376-fceeff53c9c3' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-cda41c2e-4678-4873-9376-fceeff53c9c3' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9a42af78-8b5c-467c-814b-2a9a892cb8ce' class='xr-var-data-in' type='checkbox'><label for='data-9a42af78-8b5c-467c-814b-2a9a892cb8ce' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[5.30677811, 5.30677811, 5.30677811, ..., 5.30677811, 5.30677811,
            5.30677811],
           [4.97589565, 4.97589565, 4.97589565, ..., 4.97589565, 4.97589565,
            4.97589565],
           [5.03865801, 5.03865801, 5.03865801, ..., 5.03865801, 5.03865801,
            5.03865801],
           ...,
           [4.73538083, 4.73538083, 4.73538083, ..., 4.73538083, 4.73538083,
            4.73538083],
           [4.4691337 , 4.4691337 , 4.4691337 , ..., 4.4691337 , 4.4691337 ,
            4.4691337 ],
           [3.74840842, 3.74840842, 3.74840842, ..., 3.74840842, 3.74840842,
            3.74840842]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t9</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>9.516 9.516 9.516 ... 9.846 9.846</div><input id='attrs-9074896f-05b9-418d-a846-b3673666956d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-9074896f-05b9-418d-a846-b3673666956d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-5f1b58fe-4d4d-4e7c-8fa3-5936ba63d368' class='xr-var-data-in' type='checkbox'><label for='data-5f1b58fe-4d4d-4e7c-8fa3-5936ba63d368' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[ 9.5157634 ,  9.5157634 ,  9.5157634 , ...,  9.5157634 ,
             9.5157634 ,  9.5157634 ],
           [10.74207058, 10.74207058, 10.74207058, ..., 10.74207058,
            10.74207058, 10.74207058],
           [10.31814184, 10.31814184, 10.31814184, ..., 10.31814184,
            10.31814184, 10.31814184],
           ...,
           [10.04575167, 10.04575167, 10.04575167, ..., 10.04575167,
            10.04575167, 10.04575167],
           [ 9.96493529,  9.96493529,  9.96493529, ...,  9.96493529,
             9.96493529,  9.96493529],
           [ 9.84640084,  9.84640084,  9.84640084, ...,  9.84640084,
             9.84640084,  9.84640084]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v10</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>3.994 3.994 3.994 ... 4.686 4.686</div><input id='attrs-c05c502e-c6cd-4bb0-9a9a-ae9932fe9ee6' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c05c502e-c6cd-4bb0-9a9a-ae9932fe9ee6' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-11236345-9637-4d4b-85e1-1ed989e227a4' class='xr-var-data-in' type='checkbox'><label for='data-11236345-9637-4d4b-85e1-1ed989e227a4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[3.99409146, 3.99409146, 3.99409146, ..., 3.99409146, 3.99409146,
            3.99409146],
           [4.7102646 , 4.7102646 , 4.7102646 , ..., 4.7102646 , 4.7102646 ,
            4.7102646 ],
           [4.80383957, 4.80383957, 4.80383957, ..., 4.80383957, 4.80383957,
            4.80383957],
           ...,
           [4.72848267, 4.72848267, 4.72848267, ..., 4.72848267, 4.72848267,
            4.72848267],
           [3.49316425, 3.49316425, 3.49316425, ..., 3.49316425, 3.49316425,
            3.49316425],
           [4.68578381, 4.68578381, 4.68578381, ..., 4.68578381, 4.68578381,
            4.68578381]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t10</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.19 10.19 10.19 ... 9.188 9.188</div><input id='attrs-45b2f1f9-38b2-4e1c-b036-c2de89d1397c' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-45b2f1f9-38b2-4e1c-b036-c2de89d1397c' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-a9cd67af-fd2a-4362-bf31-f822ba9c4363' class='xr-var-data-in' type='checkbox'><label for='data-a9cd67af-fd2a-4362-bf31-f822ba9c4363' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.19356482, 10.19356482, 10.19356482, ..., 10.19356482,
            10.19356482, 10.19356482],
           [10.45848969, 10.45848969, 10.45848969, ..., 10.45848969,
            10.45848969, 10.45848969],
           [10.64748389, 10.64748389, 10.64748389, ..., 10.64748389,
            10.64748389, 10.64748389],
           ...,
           [ 9.48931113,  9.48931113,  9.48931113, ...,  9.48931113,
             9.48931113,  9.48931113],
           [ 9.78314734,  9.78314734,  9.78314734, ...,  9.78314734,
             9.78314734,  9.78314734],
           [ 9.18833171,  9.18833171,  9.18833171, ...,  9.18833171,
             9.18833171,  9.18833171]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v11</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.144 4.144 4.144 ... 4.582 4.582</div><input id='attrs-14fcd2d2-fdbe-4f3e-baa9-ad05c46a3e6d' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-14fcd2d2-fdbe-4f3e-baa9-ad05c46a3e6d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-e456dbb5-d871-4e7a-9a9e-9f4e92e77018' class='xr-var-data-in' type='checkbox'><label for='data-e456dbb5-d871-4e7a-9a9e-9f4e92e77018' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[4.14361679, 4.14361679, 4.14361679, ..., 4.14361679, 4.14361679,
            4.14361679],
           [4.52322166, 4.52322166, 4.52322166, ..., 4.52322166, 4.52322166,
            4.52322166],
           [4.14529923, 4.14529923, 4.14529923, ..., 4.14529923, 4.14529923,
            4.14529923],
           ...,
           [4.37377183, 4.37377183, 4.37377183, ..., 4.37377183, 4.37377183,
            4.37377183],
           [4.20938565, 4.20938565, 4.20938565, ..., 4.20938565, 4.20938565,
            4.20938565],
           [4.58218312, 4.58218312, 4.58218312, ..., 4.58218312, 4.58218312,
            4.58218312]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t11</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.22 10.22 10.22 ... 11.28 11.28</div><input id='attrs-c8d144aa-066a-4058-861a-2c4f6719654b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-c8d144aa-066a-4058-861a-2c4f6719654b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9711a06e-d7f2-48f6-8083-92f33bf8af5f' class='xr-var-data-in' type='checkbox'><label for='data-9711a06e-d7f2-48f6-8083-92f33bf8af5f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.22254528, 10.22254528, 10.22254528, ..., 10.22254528,
            10.22254528, 10.22254528],
           [ 9.55674332,  9.55674332,  9.55674332, ...,  9.55674332,
             9.55674332,  9.55674332],
           [ 9.41025768,  9.41025768,  9.41025768, ...,  9.41025768,
             9.41025768,  9.41025768],
           ...,
           [ 9.27828509,  9.27828509,  9.27828509, ...,  9.27828509,
             9.27828509,  9.27828509],
           [ 9.91798533,  9.91798533,  9.91798533, ...,  9.91798533,
             9.91798533,  9.91798533],
           [11.28372608, 11.28372608, 11.28372608, ..., 11.28372608,
            11.28372608, 11.28372608]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v12</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>4.057 4.057 4.057 ... 5.008 5.008</div><input id='attrs-5ed698a2-4248-4062-9241-b5a56b46ba31' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-5ed698a2-4248-4062-9241-b5a56b46ba31' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-03c8a043-d518-45fa-b16e-a319744bceae' class='xr-var-data-in' type='checkbox'><label for='data-03c8a043-d518-45fa-b16e-a319744bceae' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[4.05657694, 4.05657694, 4.05657694, ..., 4.05657694, 4.05657694,
            4.05657694],
           [3.3099144 , 3.3099144 , 3.3099144 , ..., 3.3099144 , 3.3099144 ,
            3.3099144 ],
           [4.52368609, 4.52368609, 4.52368609, ..., 4.52368609, 4.52368609,
            4.52368609],
           ...,
           [3.15519034, 3.15519034, 3.15519034, ..., 3.15519034, 3.15519034,
            3.15519034],
           [4.97264041, 4.97264041, 4.97264041, ..., 4.97264041, 4.97264041,
            4.97264041],
           [5.00754806, 5.00754806, 5.00754806, ..., 5.00754806, 5.00754806,
            5.00754806]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t12</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>8.976 8.976 8.976 ... 10.8 10.8</div><input id='attrs-a20ee6e6-abbb-42d5-9564-bc57cba863f7' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-a20ee6e6-abbb-42d5-9564-bc57cba863f7' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b3230f85-1a6d-40e8-8d31-4ad3312c3d90' class='xr-var-data-in' type='checkbox'><label for='data-b3230f85-1a6d-40e8-8d31-4ad3312c3d90' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[ 8.97556832,  8.97556832,  8.97556832, ...,  8.97556832,
             8.97556832,  8.97556832],
           [ 9.90711471,  9.90711471,  9.90711471, ...,  9.90711471,
             9.90711471,  9.90711471],
           [10.2351151 , 10.2351151 , 10.2351151 , ..., 10.2351151 ,
            10.2351151 , 10.2351151 ],
           ...,
           [ 9.90990558,  9.90990558,  9.90990558, ...,  9.90990558,
             9.90990558,  9.90990558],
           [10.02653043, 10.02653043, 10.02653043, ..., 10.02653043,
            10.02653043, 10.02653043],
           [10.79967748, 10.79967748, 10.79967748, ..., 10.79967748,
            10.79967748, 10.79967748]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v13</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>3.612 3.612 3.612 ... 4.506 4.506</div><input id='attrs-50a03e45-c297-479f-9316-3f7d2f657951' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-50a03e45-c297-479f-9316-3f7d2f657951' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0084ab7f-6138-4ca2-8875-1eb0cccda706' class='xr-var-data-in' type='checkbox'><label for='data-0084ab7f-6138-4ca2-8875-1eb0cccda706' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[3.61150208, 3.61150208, 3.61150208, ..., 3.61150208, 3.61150208,
            3.61150208],
           [3.91951268, 3.91951268, 3.91951268, ..., 3.91951268, 3.91951268,
            3.91951268],
           [4.07528257, 4.07528257, 4.07528257, ..., 4.07528257, 4.07528257,
            4.07528257],
           ...,
           [4.36999523, 4.36999523, 4.36999523, ..., 4.36999523, 4.36999523,
            4.36999523],
           [4.63122431, 4.63122431, 4.63122431, ..., 4.63122431, 4.63122431,
            4.63122431],
           [4.50570722, 4.50570722, 4.50570722, ..., 4.50570722, 4.50570722,
            4.50570722]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>t13</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>10.56 10.56 10.56 ... 9.924 9.924</div><input id='attrs-311ea161-eedd-4232-b9eb-b01e401d1e72' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-311ea161-eedd-4232-b9eb-b01e401d1e72' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-337b5ab1-49e4-43f5-a526-2ba0aeeda270' class='xr-var-data-in' type='checkbox'><label for='data-337b5ab1-49e4-43f5-a526-2ba0aeeda270' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[10.56249225, 10.56249225, 10.56249225, ..., 10.56249225,
            10.56249225, 10.56249225],
           [ 9.92896857,  9.92896857,  9.92896857, ...,  9.92896857,
             9.92896857,  9.92896857],
           [10.04863255, 10.04863255, 10.04863255, ..., 10.04863255,
            10.04863255, 10.04863255],
           ...,
           [ 9.61748423,  9.61748423,  9.61748423, ...,  9.61748423,
             9.61748423,  9.61748423],
           [ 9.36993386,  9.36993386,  9.36993386, ...,  9.36993386,
             9.36993386,  9.36993386],
           [ 9.9244934 ,  9.9244934 ,  9.9244934 , ...,  9.9244934 ,
             9.9244934 ,  9.9244934 ]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>v14</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>5.01 5.01 5.01 ... 5.152 5.152</div><input id='attrs-a2171a9b-5b59-403a-88c2-fc782f650145' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-a2171a9b-5b59-403a-88c2-fc782f650145' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8f64f3c0-260e-4818-aebb-36b8787412ef' class='xr-var-data-in' type='checkbox'><label for='data-8f64f3c0-260e-4818-aebb-36b8787412ef' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[5.01047511, 5.01047511, 5.01047511, ..., 5.01047511, 5.01047511,
            5.01047511],
           [5.55419531, 5.55419531, 5.55419531, ..., 5.55419531, 5.55419531,
            5.55419531],
           [4.89602167, 4.89602167, 4.89602167, ..., 4.89602167, 4.89602167,
            4.89602167],
           ...,
           [5.20837162, 5.20837162, 5.20837162, ..., 5.20837162, 5.20837162,
            5.20837162],
           [4.82397704, 4.82397704, 4.82397704, ..., 4.82397704, 4.82397704,
            4.82397704],
           [5.15231417, 5.15231417, 5.15231417, ..., 5.15231417, 5.15231417,
            5.15231417]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-4077294c-6244-4767-bbbd-fe5007508fd5' class='xr-section-summary-in' type='checkbox'  ><label for='section-4077294c-6244-4767-bbbd-fe5007508fd5' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>chain</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-cd20766f-4b69-46dc-835b-caee02765500' class='xr-index-data-in' type='checkbox'/><label for='index-cd20766f-4b69-46dc-835b-caee02765500' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
           18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
           36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
           54, 55, 56, 57, 58, 59],
          dtype=&#x27;int64&#x27;, name=&#x27;chain&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>draw</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-79448da6-be10-43a1-9f4f-11d0386d7049' class='xr-index-data-in' type='checkbox'/><label for='index-79448da6-be10-43a1-9f4f-11d0386d7049' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([    0,     1,     2,     3,     4,     5,     6,     7,     8,     9,
           ...
           19990, 19991, 19992, 19993, 19994, 19995, 19996, 19997, 19998, 19999],
          dtype=&#x27;int64&#x27;, name=&#x27;draw&#x27;, length=20000))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-609904a7-cc49-4acd-8f07-ef4f9934d437' class='xr-section-summary-in' type='checkbox'  checked><label for='section-609904a7-cc49-4acd-8f07-ef4f9934d437' class='xr-section-summary' >Attributes: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>created_at :</span></dt><dd>2024-04-17T06:14:50.009163</dd><dt><span>arviz_version :</span></dt><dd>0.17.0</dd><dt><span>inference_library :</span></dt><dd>emcee</dd><dt><span>inference_library_version :</span></dt><dd>3.1.4</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 1002-1089

.. code-block:: Python


    flat_samples = sampler.get_chain(discard=10_000, thin=500, flat=True)
    rand_indices = np.random.randint(len(flat_samples), size=100)

    gs = gridspec.GridSpec(2, 3, width_ratios=[1, 2, 2])
    fig = plt.figure(figsize=(12, 5))
    ax1 = fig.add_subplot(gs[:, 0])
    ax2 = fig.add_subplot(gs[:, 1])
    ax3 = fig.add_subplot(gs[0, 2])
    ax4 = fig.add_subplot(gs[1, 2])

    ax1.set_ylim(100)
    ax3.set_xlim(-5, 20)
    ax3.set_ylim(-0.2, 0.6)
    ax4.set_xlim(-5, 20)
    ax4.set_ylim(-0.4, 1.2)

    # plot samples and data predictions from samples
    for idx in rand_indices:
        sample = flat_samples[idx]
        plot_model(sample, ax=ax1, alpha=0.2, lw=0.5, color="gray")
        plot_sw_data(forward_sw_interp(sample, field_d_periods_logspace),
                     field_d_periods_logspace, 
                     ax=ax2, alpha=0.2, lw=0.5, color="gray")
        plot_rf_data(forward_rf_interp(sample, 1, ray_param_1_0), rf_field_times,
                     ax=ax3, alpha=0.2, lw=0.5, color="gray")
        plot_rf_data(forward_rf_interp(sample, 2.5, ray_param_2_5), rf_field_times,
                     ax=ax4, alpha=0.2, lw=0.5, color="gray")

    # add labels to samples
    sample_0 = flat_samples[rand_indices[0]]
    plot_model(sample_0, ax=ax1, alpha=0.5, lw=0.5, color="gray", label="samples")
    plot_sw_data(forward_sw_interp(sample_0, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, 
                 alpha=0.5, lw=0.5, color="gray", label="rayleigh_dpred from samples")
    plot_rf_data(forward_rf_interp(sample_0, 1, ray_param_1_0), rf_field_times, ax=ax3, 
                 alpha=0.5, lw=0.5, color="gray", label="rf_dpred from samples")
    plot_rf_data(forward_rf_interp(sample_0, 2.5, ray_param_2_5), rf_field_times, ax=ax4, 
                 alpha=0.5, lw=0.5, color="gray", label="rf_dpred from samples")

    # plot reference good model and data observations
    plot_model(ref_good_model, ax=ax1, alpha=1, color="r", label="reference good model")
    plot_sw_data(rayleigh_field_d_obs, field_d_periods, ax=ax2, scatter=True, color="r", s=4, 
              label="rayleigh_dobs")
    plot_rf_data(rf_field_dobs_1_0, rf_field_times, ax=ax3, scatter=True, color="r", s=2, 
              label="rf_dobs")
    plot_rf_data(rf_field_dobs_2_5, rf_field_times, ax=ax4, scatter=True, color="r", s=2, 
              label="rf_dobs")

    # plot damped optimisation result
    plot_model(inv_res_optimiser_field.model, ax=ax1, alpha=1, color="green", 
               label="damped solution")
    plot_sw_data(forward_sw_interp(inv_res_optimiser_field.model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, color="green",
                 label="rayleigh_dpred from damped solution")
    plot_rf_data(forward_rf_interp(inv_res_optimiser_field.model, 1, ray_param_1_0), 
                 rf_field_times, ax=ax3, color="green",
                 label="rf_dpred from damped solution")
    plot_rf_data(forward_rf_interp(inv_res_optimiser_field.model, 2.5, ray_param_2_5), 
                 rf_field_times, ax=ax4, color="green",
                 label="rf_dpred from damped solution")

    # plot initial model for dampied optimsiation
    plot_model(init_model, ax=ax1, alpha=1, color="purple", 
               label="initial model for damped solution")
    plot_sw_data(forward_sw_interp(init_model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, color="purple",
                 label="rayleigh_dpred from initial model for damped solution")
    plot_rf_data(forward_rf_interp(init_model, 1, ray_param_1_0), rf_field_times, 
                 ax=ax3, color="purple",
                 label="rf_dpred from initial model for damped solution")
    plot_rf_data(forward_rf_interp(init_model, 2.5, ray_param_2_5), rf_field_times, 
                 ax=ax4, color="purple",
                 label="rf_dpred from initial model for damped solution")

    ax1.legend(loc="upper center", bbox_to_anchor=(0.5, -0.18))
    ax2.legend(loc="upper center", bbox_to_anchor=(0.5, -0.18))
    ax4.legend(loc="upper center", bbox_to_anchor=(0.5, -0.6))
    ax1.grid()
    ax2.grid()
    ax3.grid()
    ax4.grid()
    ax3.set_title("receiver function data (ray=1.0)")
    ax4.set_title("receiver function data (ray=2.5)")

    plt.tight_layout()




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_010.png
   :alt: model, surface wave data, receiver function data (ray=1.0), receiver function data (ray=2.5)
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_010.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 1094-1097

Trans-dimensional sampling
--------------------------


.. GENERATED FROM PYTHON SOURCE LINES 1100-1102

**Prepare utilities for trans-d sampling**


.. GENERATED FROM PYTHON SOURCE LINES 1102-1111

.. code-block:: Python


    def fwd_for_bayesbay(state, fwd_func, **kwargs):
        vs = state["voronoi"]["vs"]
        voronoi_sites = state["voronoi"]["discretization"]
        depths = (voronoi_sites[:-1] + voronoi_sites[1:]) / 2
        thicknesses = depths - np.insert(depths[:-1], 0, 0)
        model = form_layercake_model(thicknesses, vs)
        return fwd_func(model, **kwargs)








.. GENERATED FROM PYTHON SOURCE LINES 1113-1127

.. code-block:: Python


    targets = [
        bayesbay.Target("rayleigh", rayleigh_field_d_obs, covariance_mat_inv=1/rayleigh_std**2),
        bayesbay.Target("rf_1_0", rf_field_dobs_1_0, covariance_mat_inv=1/rf_1_0_std**2), 
        bayesbay.Target("rf_2_5", rf_field_dobs_2_5, covariance_mat_inv=1/rf_2_5_std**2)
    ]
    forward_funcs = [
        (fwd_for_bayesbay, {"fwd_func": forward_sw_interp, "periods": field_d_periods}), 
        (fwd_for_bayesbay, {"fwd_func": forward_rf_interp, "gauss": 1, "ray_param": ray_param_1_0}),
        (fwd_for_bayesbay, {"fwd_func": forward_rf_interp, "gauss": 2.5, "ray_param": ray_param_2_5})
    ]

    my_log_likelihood = bayesbay.LogLikelihood(targets, forward_funcs)








.. GENERATED FROM PYTHON SOURCE LINES 1129-1152

.. code-block:: Python


    param_vs = bayesbay.prior.UniformPrior(
        name="vs", 
        vmin=[2.7, 3.2, 3.75], 
        vmax=[4, 4.75, 5], 
        position=[0, 40, 80], 
        perturb_std=0.15
    )

    def param_vs_initialize(param, positions): 
        vmin, vmax = param.get_vmin_vmax(positions)
        sorted_vals = np.sort(np.random.uniform(vmin, vmax, positions.size))
        for i in range (len(sorted_vals)):
            val = sorted_vals[i]
            vmin_i = vmin if np.isscalar(vmin) else vmin[i]
            vmax_i = vmax if np.isscalar(vmax) else vmax[i]
            if val < vmin_i or val > vmax_i:
                if val > vmax_i: sorted_vals[i] = vmax_i
                if val < vmin_i: sorted_vals[i] = vmin_i
        return sorted_vals

    param_vs.set_custom_initialize(param_vs_initialize)








.. GENERATED FROM PYTHON SOURCE LINES 1154-1169

.. code-block:: Python


    parameterization = bayesbay.parameterization.Parameterization(
        bayesbay.discretization.Voronoi1D(
            name="voronoi", 
            vmin=0, 
            vmax=150, 
            perturb_std=10, 
            n_dimensions=None, 
            n_dimensions_min=4, 
            n_dimensions_max=15, 
            parameters=[param_vs], 
        )
    )
    my_perturbation_funcs = parameterization.perturbation_functions








.. GENERATED FROM PYTHON SOURCE LINES 1171-1177

.. code-block:: Python


    n_chains=12
    walkers_start = []
    for i in range(n_chains):
        walkers_start.append(parameterization.initialize())








.. GENERATED FROM PYTHON SOURCE LINES 1182-1184

**Define ``InversionOptions``**


.. GENERATED FROM PYTHON SOURCE LINES 1184-1198

.. code-block:: Python


    inv_options_trans_d = cofi.InversionOptions()
    inv_options_trans_d.set_tool("bayesbay")
    inv_options_trans_d.set_params(
        walkers_starting_states=walkers_start,
        perturbation_funcs=my_perturbation_funcs,
        log_like_ratio_func=my_log_likelihood,
        n_chains=n_chains, 
        n_iterations=2_000, 
        burnin_iterations=1_000,
        verbose=False, 
        save_every=200, 
    )








.. GENERATED FROM PYTHON SOURCE LINES 1203-1205

**Define ``Inversion`` and run**


.. GENERATED FROM PYTHON SOURCE LINES 1205-1209

.. code-block:: Python


    inv_trans_d_sampler_field = cofi.Inversion(joint_field_problem, inv_options_trans_d)
    inv_res_trans_d_sampler_field = inv_trans_d_sampler_field.run()








.. GENERATED FROM PYTHON SOURCE LINES 1211-1217

.. code-block:: Python


    saved_states = inv_res_trans_d_sampler_field.models
    samples_voronoi = saved_states["voronoi.discretization"]
    samples_vs = saved_states["voronoi.vs"]
    interp_depths = np.arange(150, dtype=float)








.. GENERATED FROM PYTHON SOURCE LINES 1219-1307

.. code-block:: Python


    rand_indices = np.random.randint(len(samples_voronoi), size=100)

    gs = gridspec.GridSpec(2, 3, width_ratios=[1, 2, 2])
    fig = plt.figure(figsize=(12, 5))
    ax1 = fig.add_subplot(gs[:, 0])
    ax2 = fig.add_subplot(gs[:, 1])
    ax3 = fig.add_subplot(gs[0, 2])
    ax4 = fig.add_subplot(gs[1, 2])

    ax1.set_ylim(100)
    ax3.set_xlim(-5, 20)
    ax3.set_ylim(-0.2, 0.6)
    ax4.set_xlim(-5, 20)
    ax4.set_ylim(-0.4, 1.2)

    # plot samples and data predictions from samples
    for idx in rand_indices:
        sample_voronoi = form_voronoi_model(samples_voronoi[idx], samples_vs[idx])
        sample = voronoi_to_layercake(sample_voronoi)
        plot_model(sample, ax=ax1, alpha=0.2, lw=0.5, color="gray")
        plot_sw_data(forward_sw_interp(sample, field_d_periods_logspace),
                     field_d_periods_logspace, 
                     ax=ax2, alpha=0.2, lw=0.5, color="gray")
        plot_rf_data(forward_rf_interp(sample, 1, ray_param_1_0), rf_field_times,
                     ax=ax3, alpha=0.2, lw=0.5, color="gray")
        plot_rf_data(forward_rf_interp(sample, 2.5, ray_param_2_5), rf_field_times,
                     ax=ax4, alpha=0.2, lw=0.5, color="gray")

    # add labels to samples
    sample_0_voronoi = form_voronoi_model(samples_voronoi[0], samples_vs[0])
    sample_0 = voronoi_to_layercake(sample_0_voronoi)
    plot_model(sample_0, ax=ax1, alpha=0.5, lw=0.5, color="gray", label="samples")
    plot_sw_data(forward_sw_interp(sample_0, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, 
                 alpha=0.5, lw=0.5, color="gray", label="rayleigh_dpred from samples")
    plot_rf_data(forward_rf_interp(sample_0, 1, ray_param_1_0), rf_field_times, ax=ax3, 
                 alpha=0.5, lw=0.5, color="gray", label="rf_dpred from samples")
    plot_rf_data(forward_rf_interp(sample_0, 2.5, ray_param_2_5), rf_field_times, ax=ax4, 
                 alpha=0.5, lw=0.5, color="gray", label="rf_dpred from samples")

    # plot reference good model and data observations
    plot_model(ref_good_model, ax=ax1, alpha=1, color="r", label="reference good model")
    plot_sw_data(rayleigh_field_d_obs, field_d_periods, ax=ax2, scatter=True, color="r", s=4, 
              label="rayleigh_dobs")
    plot_rf_data(rf_field_dobs_1_0, rf_field_times, ax=ax3, scatter=True, color="r", s=2, 
              label="rf_dobs")
    plot_rf_data(rf_field_dobs_2_5, rf_field_times, ax=ax4, scatter=True, color="r", s=2, 
              label="rf_dobs")

    # plot damped optimisation result
    plot_model(inv_res_optimiser_field.model, ax=ax1, alpha=1, color="green", 
               label="damped solution")
    plot_sw_data(forward_sw_interp(inv_res_optimiser_field.model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, color="green",
                 label="rayleigh_dpred from damped solution")
    plot_rf_data(forward_rf_interp(inv_res_optimiser_field.model, 1, ray_param_1_0), 
                 rf_field_times, ax=ax3, color="green",
                 label="rf_dpred from damped solution")
    plot_rf_data(forward_rf_interp(inv_res_optimiser_field.model, 2.5, ray_param_2_5), 
                 rf_field_times, ax=ax4, color="green",
                 label="rf_dpred from damped solution")

    # plot initial model for dampied optimsiation
    plot_model(init_model, ax=ax1, alpha=1, color="purple", 
               label="initial model for damped solution")
    plot_sw_data(forward_sw_interp(init_model, field_d_periods_logspace), 
                 field_d_periods_logspace, ax=ax2, color="purple",
                 label="rayleigh_dpred from initial model for damped solution")
    plot_rf_data(forward_rf_interp(init_model, 1, ray_param_1_0), rf_field_times, 
                 ax=ax3, color="purple",
                 label="rf_dpred from initial model for damped solution")
    plot_rf_data(forward_rf_interp(init_model, 2.5, ray_param_2_5), rf_field_times, 
                 ax=ax4, color="purple",
                 label="rf_dpred from initial model for damped solution")

    ax1.legend(loc="upper center", bbox_to_anchor=(0.5, -0.18))
    ax2.legend(loc="upper center", bbox_to_anchor=(0.5, -0.18))
    ax4.legend(loc="upper center", bbox_to_anchor=(0.5, -0.6))
    ax1.grid()
    ax2.grid()
    ax3.grid()
    ax4.grid()
    ax3.set_title("receiver function data (ray=1.0)")
    ax4.set_title("receiver function data (ray=2.5)")

    plt.tight_layout()




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_011.png
   :alt: model, surface wave data, receiver function data (ray=1.0), receiver function data (ray=2.5)
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_surface_wave_receiver_function_joint_011.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 1312-1317

--------------

Watermark
---------


.. GENERATED FROM PYTHON SOURCE LINES 1317-1323

.. code-block:: Python


    watermark_list = ["cofi", "espresso", "numpy", "matplotlib", "scipy", "bayesbay"]
    for pkg in watermark_list:
        pkg_var = __import__(pkg)
        print(pkg, getattr(pkg_var, "__version__"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cofi 0.2.7
    espresso 0.3.13
    numpy 1.24.4
    matplotlib 3.8.3
    scipy 1.12.0
    bayesbay 0.2.0




.. GENERATED FROM PYTHON SOURCE LINES 1324-1324

sphinx_gallery_thumbnail_number = -1


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 19.802 seconds)


.. _sphx_glr_download_examples_generated_scripts_field_data_surface_wave_receiver_function_joint.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: surface_wave_receiver_function_joint.ipynb <surface_wave_receiver_function_joint.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: surface_wave_receiver_function_joint.py <surface_wave_receiver_function_joint.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
