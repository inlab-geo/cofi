
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/generated/scripts_field_data/linear_regression_sealevel.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_generated_scripts_field_data_linear_regression_sealevel.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_generated_scripts_field_data_linear_regression_sealevel.py:


Linear regression with Eustatic Sea-level data
==============================================

.. GENERATED FROM PYTHON SOURCE LINES 9-14

|Open In Colab|

.. |Open In Colab| image:: https://img.shields.io/badge/open%20in-Colab-b5e2fa?logo=googlecolab&style=flat-square&color=ffd670
   :target: https://colab.research.google.com/github/inlab-geo/cofi-examples/blob/main/examples/linear_regression/linear_regression_sealevel.ipynb


.. GENERATED FROM PYTHON SOURCE LINES 17-24

If you are running this notebook locally, make sure you’ve followed
`steps
here <https://github.com/inlab-geo/cofi-examples#run-the-examples-with-cofi-locally>`__
to set up the environment. (This
`environment.yml <https://github.com/inlab-geo/cofi-examples/blob/main/envs/environment.yml>`__
file specifies a list of packages required to run the notebooks)


.. GENERATED FROM PYTHON SOURCE LINES 27-47

--------------

What we do in this notebook
---------------------------

Here we demonstrate use of CoFI on a real dataset **linear regression**
problem, where we fit a polynomial function to Eustatic Sea-level
heights.

-  by solution of a linear system of equations,
-  by optimization of a data misfit function
-  by Bayesian sampling of a Likelihood multiplied by a prior.

--------------

Data set is from “Sea level and global ice volumes from the Last Glacial
Maximum to the Holocene” K. Lambeck, H. Rouby, A. Purcell, Y. Sun, and
M. Sambridge, 2014. Proc. Nat. Acad. Sci., 111, no. 43, 15296-15303,
doi:10.1073/pnas.1411762111.


.. GENERATED FROM PYTHON SOURCE LINES 47-54

.. code-block:: Python


    # Environment setup (uncomment code below)

    # !pip install -U cofi
    # !git clone https://github.com/inlab-geo/cofi-examples.git
    # %cd cofi-examples/examples/linear_regression








.. GENERATED FROM PYTHON SOURCE LINES 59-64

Linear regression
-----------------

Lets start with some (x,y) data.


.. GENERATED FROM PYTHON SOURCE LINES 64-68

.. code-block:: Python


    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 70-108

.. code-block:: Python


    #
    def load_data_xy(filename):

        f = open(filename, 'r')
        header = f.readline()
        lines = f.readlines()

        x = np.array([])
        y = np.array([])
        sx = np.array([])
        sy = np.array([])
        for line in lines:
            columns = line.split()
            x = np.append(x,float(columns[0]))
            y = np.append(y,float(columns[1]))
            sx = np.append(sx,float(columns[2])/2.0)
            sy = np.append(sy,float(columns[3])/2.0)

        d = x,y, sy                                   # Combine into a single data structure

        return d

    def load_data_ref(filename):

        f = open(filename, 'r')
        lines = f.readlines()
        dx = np.array([]) # Age data
        dy = np.array([]) # ESL height
        dz = np.array([]) # derivative of ESL w.r.t. age
        for line in lines:
            columns = line.split()
            dx = np.append(dx,float(columns[0]))
            dy = np.append(dy,float(columns[1]))
        datavals = np.column_stack((dx,dy))  # Stack data

        return datavals








.. GENERATED FROM PYTHON SOURCE LINES 110-113

.. code-block:: Python


    data_x,data_y,sy = load_data_xy("../../data/eustatic_sea_level/ESL-ff11-sorted.txt")  # Load x,sx,y,sy ESL data (x=time, Y=ESL)








.. GENERATED FROM PYTHON SOURCE LINES 115-119

.. code-block:: Python


    maxtime = 20.
    ndata = np.where(data_x>maxtime)[0][0]








.. GENERATED FROM PYTHON SOURCE LINES 121-124

.. code-block:: Python


    data_x,data_y,sy = data_x[:ndata],data_y[:ndata],sy[:ndata]








.. GENERATED FROM PYTHON SOURCE LINES 129-131

And now lets plot the data.


.. GENERATED FROM PYTHON SOURCE LINES 131-140

.. code-block:: Python


    def plot_data(x=data_x,y=data_y,sigma=sy,title=None):
        fig, axes = plt.subplots(figsize=(9,6))
        plt.errorbar(x, y, yerr=sy, fmt='.',color="lightcoral",ecolor='lightgrey',ms=2)
        plt.xlabel(' Time before present (ka)')
        plt.ylabel(' ESL height (m)')
        if(title != None): plt.title(title)
    plot_data(title='Eustatic sea-level')




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_001.png
   :alt: Eustatic sea-level
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 145-184

Problem description
-------------------

To begin with, we will work with polynomial curves,

.. math:: y(x) = \sum_{j=0}^M m_j x^j\,.

Here, :math:`M` is the ‘order’ of the polynomial: if :math:`M=1` we have
a straight line with 2 parameters, if :math:`M=2` it will be a quadratic
with 3 parameters, and so on. The :math:`m_j, (j=0,\dots M)` are the
‘model coefficients’ that we seek to constrain from the data.

For this class of problem the forward operator takes the following form:

.. math::  \left(\begin{array}{c}y_0\\y_1\\\vdots\\y_N\end{array}\right) = \left(\begin{array}{ccc}1&x_0&x_0^2&x_0^3\\1&x_1&x_1^2&x_1^3\\\vdots&\vdots&\vdots\\1&x_N&x_N^2&x_N^3\end{array}\right)\left(\begin{array}{c}m_0\\m_1\\m_2\end{array}\right)

This clearly has the required general form,
:math:`\mathbf{d} =G{\mathbf m}`.

where:

-  :math:`\textbf{d}` is the vector of data values,
   (:math:`y_0,y_1,\dots,y_N`);
-  :math:`\textbf{m}` is the vector of model parameters,
   (:math:`m_0,m_1,m_2`);
-  :math:`G` is the basis matrix (or design matrix) of this linear
   regression problem (also called the **Jacobian** matrix for this
   linear problem).

We have a set of noisy data values, :math:`y_i (i=0,\dots,N)`, measured
at known locations, :math:`x_i (i=0,\dots,N)`, and wish to find the best
fit degree 3 polynomial.

The function that generated our data is assumed to have independent
Gaussian random noise, :math:`{\cal N}(0,\Sigma)`, with
:math:`(\Sigma)_{ij} = \delta_{ij}/\sigma_i^2`, where the variance of
the noise on each datum, :math:`\sigma_i^2 (i=1,\dots,N)`, differs
between observations and is given.


.. GENERATED FROM PYTHON SOURCE LINES 187-190

We now build the Jacobian/G matrix for this problem and define a forward
function which simply multiplies :math:`\mathbf m` by :math:`G`.


.. GENERATED FROM PYTHON SOURCE LINES 190-203

.. code-block:: Python


    nparams = 5 # Number of model parameters to be solved for

    def jacobian(x=data_x, n=nparams):
        return np.array([x**i for i in range(n)]).T

    def forward(model):
        return jacobian().dot(model)

    def Cd_inv(sigma=sy):
        factor= 10                                   # factor to inflate observational errors
        return np.diag(1./sy*1./sy)/(factor**2)








.. GENERATED FROM PYTHON SOURCE LINES 208-210

Define a reference model for later.


.. GENERATED FROM PYTHON SOURCE LINES 210-217

.. code-block:: Python


    # Reference model for plotting
    ESLref = load_data_ref("../../data/eustatic_sea_level/ESL-f11_yonly.txt") # Load x, y, z reference model and estimated derivative (x=time, Y=ESL, z=dESL/dt) 
    ndata2 = np.where(ESLref.T[0]>maxtime)[0][0]
    ESLref = ESLref[:ndata2]
    ref_x,ref_y = ESLref.T[0],ESLref.T[1]








.. GENERATED FROM PYTHON SOURCE LINES 222-224

Now lets plot the data with the reference curve


.. GENERATED FROM PYTHON SOURCE LINES 224-239

.. code-block:: Python


    # Some plotting utilities
    def plot_model(x,y, label, color=None,lw=0.5):
        plt.plot(x, y, color=color or "green", label=label,lw=lw)
        #plt.xlabel("X")
        #plt.ylabel("ESL")
        plt.legend()

    def plot_models(models, label="Posterior samples", color="seagreen", alpha=0.1,lw=0.5):
        G = jacobian(data_x)
        plt.plot(data_x, G.dot(models[0]), color=color, label=label, alpha=alpha,lw=lw)
        for m in models:
            plt.plot(data_x, G.dot(m), color=color, alpha=alpha,lw=lw)
        plt.legend()








.. GENERATED FROM PYTHON SOURCE LINES 241-245

.. code-block:: Python


    plot_data(title="Eustatic sea-level")
    plot_model(ref_x,ref_y, "Reference model")




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_002.png
   :alt: Eustatic sea-level
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 250-253

Now we have the data and the forward model we can start to try and
estimate the coefficients of the polynomial from the data.


.. GENERATED FROM PYTHON SOURCE LINES 256-297

The structure of CoFI 
----------------------

In the workflow of ``cofi``, there are three main components:
``BaseProblem``, ``InversionOptions``, and ``Inversion``.

-  ``BaseProblem`` defines the inverse problem including any user
   supplied quantities such as data vector, number of model parameters
   and measure of fit between model predictions and data.
   ``python     inv_problem = BaseProblem()     inv_problem.set_objective(some_function_here)     inv_problem.set_jacobian(some_function_here)     inv_problem.set_initial_model(a_starting_point) # if needed, e.g. we are solving a nonlinear problem by optimization``

    

-  ``InversionOptions`` describes details about how one wants to run the
   inversion, including the backend tool and solver-specific parameters.
   It is based on the concept of a ``method`` and ``tool``.

   .. code:: python

      inv_options = InversionOptions()
      inv_options.suggest_solving_methods()
      inv_options.set_solving_method("matrix solvers")
      inv_options.suggest_tools()
      inv_options.set_tool("scipy.linalg.lstsq")
      inv_options.summary()

    

-  ``Inversion`` can be seen as an inversion engine that takes in the
   above two as information, and will produce an ``InversionResult``
   upon running.

   .. code:: python

      inv = Inversion(inv_problem, inv_options)
      result = inv.run()

Internally CoFI decides the nature of the problem from the quantities
set by the user and performs internal checks to ensure it has all that
it needs to solve a problem.


.. GENERATED FROM PYTHON SOURCE LINES 300-303

1. Linear system solver
-----------------------


.. GENERATED FROM PYTHON SOURCE LINES 303-306

.. code-block:: Python


    from cofi import BaseProblem, InversionOptions, Inversion








.. GENERATED FROM PYTHON SOURCE LINES 311-314

Step 1. Define CoFI ``BaseProblem``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 314-320

.. code-block:: Python


    inv_problem = BaseProblem()
    inv_problem.set_data(data_y)
    inv_problem.set_jacobian(jacobian())
    inv_problem.set_data_covariance_inv(Cd_inv())








.. GENERATED FROM PYTHON SOURCE LINES 325-328

Step 2. Define CoFI ``InversionOptions``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 328-331

.. code-block:: Python


    inv_options = InversionOptions()








.. GENERATED FROM PYTHON SOURCE LINES 336-339

Using the information supplied, we can ask CoFI to suggest some solving
methods.


.. GENERATED FROM PYTHON SOURCE LINES 339-342

.. code-block:: Python


    inv_options.suggest_solving_methods()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The following solving methods are supported:
    {'sampling', 'optimization', 'matrix solvers'}

    Use `suggest_tools()` to see a full list of backend tools for each method




.. GENERATED FROM PYTHON SOURCE LINES 347-349

We can ask CoFI to suggest some specific software tools as well.


.. GENERATED FROM PYTHON SOURCE LINES 349-352

.. code-block:: Python


    inv_options.suggest_tools()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Here's a complete list of inversion tools supported by CoFI (grouped by methods):
    {
        "optimization": [
            "scipy.optimize.minimize",
            "scipy.optimize.least_squares",
            "torch.optim",
            "cofi.border_collie_optimization"
        ],
        "matrix solvers": [
            "scipy.linalg.lstsq",
            "cofi.simple_newton"
        ],
        "sampling": [
            "emcee",
            "bayesbay",
            "neighpy"
        ]
    }




.. GENERATED FROM PYTHON SOURCE LINES 354-358

.. code-block:: Python


    inv_options.set_solving_method("matrix solvers") # lets decide to use a matrix solver.
    inv_options.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    =============================
    Summary for inversion options
    =============================
    Solving method: matrix solvers
    Use `suggest_solving_methods()` to check available solving methods.
    -----------------------------
    Backend tool: `<class 'cofi.tools._scipy_lstsq.ScipyLstSq'> (by default)` - SciPy's wrapper function over LAPACK's linear least-squares solver, using 'gelsd', 'gelsy' (default), or 'gelss' as backend driver
    References: ['https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lstsq.html', 'https://www.netlib.org/lapack/lug/node27.html']
    Use `suggest_tools()` to check available backend tools.
    -----------------------------
    Solver-specific parameters: None set
    Use `suggest_solver_params()` to check required/optional solver-specific parameters.




.. GENERATED FROM PYTHON SOURCE LINES 360-364

.. code-block:: Python


    # below is optional, as this has already been the default tool under "linear least square"
    inv_options.set_tool("scipy.linalg.lstsq")








.. GENERATED FROM PYTHON SOURCE LINES 369-387

Step 3. Define CoFI ``Inversion`` and run
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Our choices so far have defined a linear parameter estimation problem
(without any regularization) to be solved within a least squares
framework. In this case the selection of a ``matrix solvers`` method
will mean we are calculating the standard least squares solution

.. math::


   m = (G^T C_d^{-1} G)^{-1} G^T C_d^{-1} d

and our choice of backend tool ``scipy.linalg.lstsq``, means that we
will employ scipy’s ``linalg`` package to perform the numerics.

Lets run CoFI.


.. GENERATED FROM PYTHON SOURCE LINES 387-391

.. code-block:: Python


    inv = Inversion(inv_problem, inv_options)
    inv_result = inv.run()








.. GENERATED FROM PYTHON SOURCE LINES 393-397

.. code-block:: Python


    print(f"The inversion result from `scipy.linalg.lstsq`: {inv_result.model}\n")
    inv_result.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The inversion result from `scipy.linalg.lstsq`: [ 1.44051039 -3.11381469  1.412872   -0.20910136  0.00653572]

    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    model: [ 1.44051039 -3.11381469  1.412872   -0.20910136  0.00653572]
    sum_of_squared_residuals: []
    effective_rank: 5
    singular_values: [1.72339368e+09 1.35569994e+06 3.54123758e+03 1.10384400e+02
     7.16903392e+00]
    model_covariance: [[ 6.70145209e-02 -6.28173834e-02  1.67266578e-02 -1.60867740e-03
       4.77025592e-05]
     [-6.28173834e-02  7.43365995e-02 -2.23488563e-02  2.32179303e-03
      -7.20214235e-05]
     [ 1.67266578e-02 -2.23488563e-02  7.38371078e-03 -8.20763652e-04
       2.65025504e-05]
     [-1.60867740e-03  2.32179303e-03 -8.20763652e-04  9.62437921e-05
      -3.21300646e-06]
     [ 4.77025592e-05 -7.20214235e-05  2.65025504e-05 -3.21300646e-06
       1.10114955e-07]]




.. GENERATED FROM PYTHON SOURCE LINES 402-404

Lets plot the solution.


.. GENERATED FROM PYTHON SOURCE LINES 404-409

.. code-block:: Python


    plot_data(title="Eustatic sea-level")
    plot_model(data_x,jacobian(data_x).dot(inv_result.model), "linear system solver", color="seagreen")
    plot_model(ref_x,ref_y, "Reference model", color="darkorange")




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_003.png
   :alt: Eustatic sea-level
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 414-439

2. Optimizer
------------

The same overdetermined linear problem,
:math:`\textbf{d} = G\textbf{m}`, with Gaussian data noise can also be
solved by minimising the squares of the residual of the linear
equations, e.g. :math:`\textbf{r}^T \textbf{C}_d^{-1}\textbf{r}` where
:math:`\textbf{r}=\textbf{d}-G\textbf{m}`. The above matrix solver
solution gives us the best data fitting model, but a direct optimisation
approach could also be used, say when the number of unknowns is large
and we do not wish, or are unable to provide the Jacobian function.

So we use a plain optimizer ``scipy.optimize.minimize`` to demonstrate
this ability.

.. raw:: html

   <!-- For this backend solver to run successfully, some additional information should be provided, otherwise
   you'll see an error to notify what additional information is required by the solver.

   There are several ways to provide the information needed to solve an inverse problem with 
   CoFI. In the example below we provide functions to calculate the data and the optional 
   regularisation. CoFI then generates the objective function for us based on the information 
   provided. The alternative to this would be to directly provide objective function to CoFI. -->


.. GENERATED FROM PYTHON SOURCE LINES 439-462

.. code-block:: Python


    ######## CoFI BaseProblem - provide additional information
    inv_problem.set_initial_model(np.ones(nparams))
    #inv_problem.set_initial_model(inv_result.model)
    inv_problem.set_forward(forward)
    inv_problem.set_data_misfit("squared error")

    # inv_problem.set_objective(your_own_misfit_function)    # (optionally) if you'd like to define your own misfit
    # inv_problem.set_gradient(your_own_gradient_of_misfit_function)    # (optionally) if you'd like to define your own misfit gradient

    ######## CoFI InversionOptions - set a different tool
    inv_options_2 = InversionOptions()
    inv_options_2.set_tool("scipy.optimize.minimize")
    inv_options_2.set_params(method="Nelder-Mead")

    ######## CoFI Inversion - run it
    inv_2 = Inversion(inv_problem, inv_options_2)
    inv_result_2 = inv_2.run()

    ######## CoFI InversionResult - check result
    print(f"The inversion result from `scipy.optimize.minimize`: {inv_result_2.model}\n")
    inv_result_2.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The inversion result from `scipy.optimize.minimize`: [-0.81319113 -0.46081553  0.61740809 -0.12663625  0.00398136]

    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    fun: 310.0689929995378
    nit: 560
    nfev: 916
    status: 0
    message: Optimization terminated successfully.
    final_simplex: (array([[-0.81319113, -0.46081553,  0.61740809, -0.12663625,  0.00398136],
           [-0.81328903, -0.46081801,  0.61741429, -0.1266371 ,  0.0039814 ],
           [-0.81317886, -0.46081571,  0.61738786, -0.12663294,  0.00398125],
           [-0.81315239, -0.46081502,  0.61739705, -0.12663469,  0.0039813 ],
           [-0.81320724, -0.46081746,  0.61741117, -0.12663795,  0.00398147],
           [-0.81318091, -0.4608153 ,  0.61740441, -0.12663565,  0.00398136]]), array([310.068993  , 310.06899312, 310.0689937 , 310.06899379,
           310.06899388, 310.06899454]))
    model: [-0.81319113 -0.46081553  0.61740809 -0.12663625  0.00398136]




.. GENERATED FROM PYTHON SOURCE LINES 464-469

.. code-block:: Python


    plot_data()
    plot_model(data_x,jacobian(data_x).dot(inv_result_2.model), "optimization solution", color="cornflowerblue")
    plot_model(ref_x,ref_y, "Reference model", color="darkorange")




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_004.png
   :alt: linear regression sealevel
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_004.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 474-477

The optimization fails to convergence for this problem (with default
settings).


.. GENERATED FROM PYTHON SOURCE LINES 480-482

--------------


.. GENERATED FROM PYTHON SOURCE LINES 485-509

Challenge - Change the polynomial degree
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Try and replace the 3rd order polynomial with a 2nd order polynomial
(i.e. :math:`M=2`) by adding the required commands below. What does the
plot looks like?

Start from code below:

::

   inv_problem = BaseProblem()
   inv_problem.set_data(data_y)
   inv_problem.set_jacobian(jacobian(n=<CHANGE ME>))
   inv_problem.set_data_covariance_inv(Cd_inv())
   inv_options.set_solving_method("matrix solvers") # lets decide to use a matrix solver.
   inv = Inversion(inv_problem, inv_options)
   inv_result = inv.run()

   print("Inferred curve with n = <CHANGE ME> ")
   plot_data()
   plot_model(data_x,jacobian(x,n=<CHANGE ME>).dot(inv_result.model), "optimization solution", color="cornflowerblue")
   plot_model(ref_x,ref_y, "Reference model", color="darkorange")


.. GENERATED FROM PYTHON SOURCE LINES 509-514

.. code-block:: Python


    # Copy the template above, Replace <CHANGE ME> with your answer










.. GENERATED FROM PYTHON SOURCE LINES 516-532

.. code-block:: Python


    #@title Solution

    inv_problem = BaseProblem()
    inv_problem.set_data(data_y)
    inv_problem.set_jacobian(jacobian(n=3))
    inv_problem.set_data_covariance_inv(Cd_inv())
    inv_options.set_solving_method("matrix solvers") # lets decide to use a matrix solver.
    inv = Inversion(inv_problem, inv_options)
    inv_result = inv.run()

    print("Inferred curve with n = 3 ")
    plot_data()
    plot_model(data_x,jacobian(data_x,n=3).dot(inv_result.model), "optimization solution", color="cornflowerblue")
    plot_model(ref_x,ref_y, "Reference model", color="darkorange")




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_005.png
   :alt: linear regression sealevel
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Inferred curve with n = 3 




.. GENERATED FROM PYTHON SOURCE LINES 537-540

Changing to a second order polynomial does converge but gives a poor
fit.


.. GENERATED FROM PYTHON SOURCE LINES 543-545

--------------


.. GENERATED FROM PYTHON SOURCE LINES 548-551

3. Bayesian sampling
--------------------


.. GENERATED FROM PYTHON SOURCE LINES 554-577

Likelihood
~~~~~~~~~~

Since data errors follow a Gaussian in this example, we can define a
Likelihood function, :math:`p({\mathbf d}_{obs}| {\mathbf m})`.

.. math::


   p({\mathbf d}_{obs} | {\mathbf m}) \propto \exp \left\{- \frac{1}{2} ({\mathbf d}_{obs}-{\mathbf d}_{pred}({\mathbf m}))^T C_D^{-1} ({\mathbf d}_{obs}-{\mathbf d}_{pred}({\mathbf m})) \right\}

where :math:`{\mathbf d}_{obs}` represents the observed y values and
:math:`{\mathbf d}_{pred}({\mathbf m})` are those predicted by the
polynomial model :math:`({\mathbf m})`. The Likelihood is defined as the
probability of observing the data actually observed, given a model. In
practice we usually only need to evaluate the log of the Likelihood,
:math:`\log p({\mathbf d}_{obs} | {\mathbf m})`. To do so, we require
the inverse data covariance matrix describing the statistics of the
noise in the data, :math:`C_D^{-1}` . For this problem the data errors
are independent with identical standard deviation in noise for each
datum. Hence :math:`C_D^{-1} = \frac{1}{\sigma^2}I` where
:math:`\sigma=1`.


.. GENERATED FROM PYTHON SOURCE LINES 580-583

Here we artificially increase the observational errors on the data so
that the spread of the posterior samples are visible.


.. GENERATED FROM PYTHON SOURCE LINES 583-591

.. code-block:: Python


    Cdinv = Cd_inv()                 # inverse data covariance matrix

    def log_likelihood(model):
        y_synthetics = forward(model)
        residual = data_y - y_synthetics
        return -0.5 * residual @ (Cdinv @ residual).T








.. GENERATED FROM PYTHON SOURCE LINES 596-599

Note that the user could specify **any appropriate Likelihood function**
of their choosing here.


.. GENERATED FROM PYTHON SOURCE LINES 602-626

Prior
~~~~~

Bayesian sampling requires a prior probability density function. A
common problem with polynomial coefficients as model parameters is that
it is not at all obvious what a prior should be. Here we choose a
uniform prior with specified bounds

.. math::


   \begin{align}
   p({\mathbf m}) &= \frac{1}{V},\quad  l_i \le m_i \le u_i, \quad (i=1,\dots,M)\\
   \\
            &= 0, \quad {\rm otherwise},
   \end{align}

where :math:`l_i` and :math:`u_i` are lower and upper bounds on the
:math:`i`\ th model coefficient.

Here use the uniform distribution with
:math:`{\mathbf l}^T = (-10.,-10.,-10.,-10.)`, and
:math:`{\mathbf u}^T = (10.,10.,10.,10.)`.


.. GENERATED FROM PYTHON SOURCE LINES 626-635

.. code-block:: Python


    m_lower_bound = np.ones(nparams) * (-10.)             # lower bound for uniform prior
    m_upper_bound = np.ones(nparams) * 10                 # upper bound for uniform prior

    def log_prior(model):    # uniform distribution
        for i in range(len(m_lower_bound)):
            if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
        return 0.0 # model lies within bounds -> return log(1)








.. GENERATED FROM PYTHON SOURCE LINES 640-643

Note that the user could specify **any appropriate Prior PDF** of their
choosing here.


.. GENERATED FROM PYTHON SOURCE LINES 646-667

Bayesian sampling
~~~~~~~~~~~~~~~~~

In this aproach we sample a probability distribution rather than find a
single best fit solution. Bayes’ theorem tells us the the posterior
distribution is proportional to the Likelihood and the prior.

.. math:: p(\mathbf{m}|\mathbf{d}) = K p(\mathbf{d}|\mathbf{m})p(\mathbf{m})

where :math:`K` is some constant. Under the assumptions specified
:math:`p(\mathbf{m}|\mathbf{d})` gives a probability density of models
that are supported by the data. We seek to draw random samples from
:math:`p(\mathbf{m}|\mathbf{d})` over model space and then to make
inferences from the resulting ensemble of model parameters.

In this example we make use of *The Affine Invariant Markov chain Monte
Carlo (MCMC) Ensemble sampler* `Goodman and Weare
2010 <https://msp.org/camcos/2010/5-1/p04.xhtml>`__ to sample the
posterior distribution of the model. (See more details about
`emcee <https://emcee.readthedocs.io/en/stable/>`__).


.. GENERATED FROM PYTHON SOURCE LINES 670-677

Starting points for random walkers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Now we define some hyperparameters (e.g. the number of walkers and
steps), and initialise the starting positions of walkers. We start all
walkers in a small ball about a chosen point :math:`(0, 0, 0, 0)`.


.. GENERATED FROM PYTHON SOURCE LINES 677-683

.. code-block:: Python


    nwalkers = 32
    ndim = nparams
    nsteps = 10000
    walkers_start = np.zeros(nparams) + 1e-4 * np.random.randn(nwalkers, ndim)








.. GENERATED FROM PYTHON SOURCE LINES 688-691

Add the information and run with CoFI
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 691-710

.. code-block:: Python


    ######## CoFI BaseProblem - provide additional information
    inv_problem.set_log_prior(log_prior)
    inv_problem.set_log_likelihood(log_likelihood)
    inv_problem.set_model_shape(ndim)

    ######## CoFI InversionOptions - get a different tool
    inv_options_3 = InversionOptions()
    inv_options_3.set_tool("emcee")      # Here we use to Affine Invariant McMC sampler from Goodman and Weare (2010).
    inv_options_3.set_params(nwalkers=nwalkers, nsteps=nsteps, progress=True, initial_state=walkers_start)

    ######## CoFI Inversion - run it
    inv_3 = Inversion(inv_problem, inv_options_3)
    inv_result_3 = inv_3.run()

    ######## CoFI InversionResult - check result
    print(f"The inversion result from `emcee`:")
    inv_result_3.summary()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/10000 [00:00<?, ?it/s]      0%|          | 35/10000 [00:00<00:28, 345.77it/s]      1%|          | 70/10000 [00:00<00:29, 339.83it/s]      1%|          | 105/10000 [00:00<00:28, 342.51it/s]      1%|▏         | 140/10000 [00:00<00:29, 336.32it/s]      2%|▏         | 176/10000 [00:00<00:28, 341.59it/s]      2%|▏         | 212/10000 [00:00<00:28, 344.88it/s]      2%|▏         | 248/10000 [00:00<00:28, 347.03it/s]      3%|▎         | 283/10000 [00:00<00:43, 223.75it/s]      3%|▎         | 311/10000 [00:01<00:44, 216.38it/s]      3%|▎         | 343/10000 [00:01<00:40, 237.82it/s]      4%|▍         | 377/10000 [00:01<00:36, 262.16it/s]      4%|▍         | 412/10000 [00:01<00:33, 284.63it/s]      4%|▍         | 443/10000 [00:01<00:35, 267.03it/s]      5%|▍         | 478/10000 [00:01<00:33, 288.31it/s]      5%|▌         | 514/10000 [00:01<00:31, 304.84it/s]      6%|▌         | 550/10000 [00:01<00:29, 317.66it/s]      6%|▌         | 586/10000 [00:01<00:28, 327.36it/s]      6%|▌         | 621/10000 [00:02<00:28, 333.27it/s]      7%|▋         | 656/10000 [00:02<00:27, 338.09it/s]      7%|▋         | 692/10000 [00:02<00:27, 342.10it/s]      7%|▋         | 728/10000 [00:02<00:26, 345.27it/s]      8%|▊         | 763/10000 [00:02<00:26, 345.24it/s]      8%|▊         | 799/10000 [00:02<00:26, 347.20it/s]      8%|▊         | 834/10000 [00:02<00:30, 301.92it/s]      9%|▊         | 869/10000 [00:02<00:29, 312.60it/s]      9%|▉         | 905/10000 [00:02<00:28, 323.61it/s]      9%|▉         | 941/10000 [00:03<00:27, 331.49it/s]     10%|▉         | 975/10000 [00:03<00:27, 329.89it/s]     10%|█         | 1011/10000 [00:03<00:26, 336.16it/s]     10%|█         | 1047/10000 [00:03<00:26, 340.71it/s]     11%|█         | 1082/10000 [00:03<00:26, 335.92it/s]     11%|█         | 1117/10000 [00:03<00:26, 339.93it/s]     12%|█▏        | 1153/10000 [00:03<00:25, 343.70it/s]     12%|█▏        | 1188/10000 [00:03<00:25, 340.19it/s]     12%|█▏        | 1223/10000 [00:03<00:25, 342.94it/s]     13%|█▎        | 1259/10000 [00:03<00:25, 345.68it/s]     13%|█▎        | 1294/10000 [00:04<00:25, 346.93it/s]     13%|█▎        | 1330/10000 [00:04<00:24, 348.38it/s]     14%|█▎        | 1366/10000 [00:04<00:24, 349.67it/s]     14%|█▍        | 1402/10000 [00:04<00:24, 350.66it/s]     14%|█▍        | 1438/10000 [00:04<00:24, 350.83it/s]     15%|█▍        | 1474/10000 [00:04<00:24, 350.54it/s]     15%|█▌        | 1510/10000 [00:04<00:24, 349.53it/s]     15%|█▌        | 1546/10000 [00:04<00:24, 350.35it/s]     16%|█▌        | 1582/10000 [00:04<00:23, 350.85it/s]     16%|█▌        | 1618/10000 [00:05<00:23, 351.34it/s]     17%|█▋        | 1654/10000 [00:05<00:23, 351.19it/s]     17%|█▋        | 1690/10000 [00:05<00:23, 350.98it/s]     17%|█▋        | 1726/10000 [00:05<00:23, 351.03it/s]     18%|█▊        | 1762/10000 [00:05<00:23, 351.10it/s]     18%|█▊        | 1798/10000 [00:05<00:23, 351.32it/s]     18%|█▊        | 1834/10000 [00:05<00:23, 351.83it/s]     19%|█▊        | 1870/10000 [00:05<00:23, 351.53it/s]     19%|█▉        | 1906/10000 [00:05<00:23, 351.42it/s]     19%|█▉        | 1942/10000 [00:05<00:22, 351.62it/s]     20%|█▉        | 1978/10000 [00:06<00:22, 352.04it/s]     20%|██        | 2014/10000 [00:06<00:22, 351.95it/s]     20%|██        | 2050/10000 [00:06<00:22, 351.64it/s]     21%|██        | 2086/10000 [00:06<00:22, 352.10it/s]     21%|██        | 2122/10000 [00:06<00:22, 351.93it/s]     22%|██▏       | 2158/10000 [00:06<00:22, 351.98it/s]     22%|██▏       | 2194/10000 [00:06<00:22, 352.17it/s]     22%|██▏       | 2230/10000 [00:06<00:22, 352.32it/s]     23%|██▎       | 2266/10000 [00:06<00:21, 352.42it/s]     23%|██▎       | 2302/10000 [00:06<00:21, 352.69it/s]     23%|██▎       | 2338/10000 [00:07<00:21, 352.36it/s]     24%|██▎       | 2374/10000 [00:07<00:21, 349.66it/s]     24%|██▍       | 2410/10000 [00:07<00:21, 350.47it/s]     24%|██▍       | 2446/10000 [00:07<00:21, 351.24it/s]     25%|██▍       | 2482/10000 [00:07<00:21, 351.38it/s]     25%|██▌       | 2518/10000 [00:07<00:21, 350.87it/s]     26%|██▌       | 2554/10000 [00:07<00:21, 350.43it/s]     26%|██▌       | 2590/10000 [00:07<00:21, 350.74it/s]     26%|██▋       | 2626/10000 [00:07<00:21, 350.17it/s]     27%|██▋       | 2662/10000 [00:07<00:20, 349.89it/s]     27%|██▋       | 2697/10000 [00:08<00:20, 349.82it/s]     27%|██▋       | 2732/10000 [00:08<00:20, 348.58it/s]     28%|██▊       | 2767/10000 [00:08<00:20, 347.67it/s]     28%|██▊       | 2802/10000 [00:08<00:20, 347.33it/s]     28%|██▊       | 2837/10000 [00:08<00:20, 346.42it/s]     29%|██▊       | 2872/10000 [00:08<00:20, 345.19it/s]     29%|██▉       | 2908/10000 [00:08<00:20, 346.94it/s]     29%|██▉       | 2943/10000 [00:08<00:20, 345.86it/s]     30%|██▉       | 2978/10000 [00:08<00:20, 344.30it/s]     30%|███       | 3013/10000 [00:08<00:20, 344.13it/s]     30%|███       | 3048/10000 [00:09<00:20, 344.98it/s]     31%|███       | 3083/10000 [00:09<00:19, 346.32it/s]     31%|███       | 3118/10000 [00:09<00:19, 346.08it/s]     32%|███▏      | 3153/10000 [00:09<00:20, 338.33it/s]     32%|███▏      | 3188/10000 [00:09<00:20, 340.43it/s]     32%|███▏      | 3223/10000 [00:09<00:19, 342.36it/s]     33%|███▎      | 3258/10000 [00:09<00:19, 344.33it/s]     33%|███▎      | 3294/10000 [00:09<00:19, 346.31it/s]     33%|███▎      | 3329/10000 [00:09<00:19, 347.10it/s]     34%|███▎      | 3364/10000 [00:10<00:19, 346.71it/s]     34%|███▍      | 3399/10000 [00:10<00:19, 345.95it/s]     34%|███▍      | 3434/10000 [00:10<00:19, 336.44it/s]     35%|███▍      | 3469/10000 [00:10<00:19, 339.57it/s]     35%|███▌      | 3504/10000 [00:10<00:18, 342.31it/s]     35%|███▌      | 3539/10000 [00:10<00:18, 342.74it/s]     36%|███▌      | 3574/10000 [00:10<00:18, 343.54it/s]     36%|███▌      | 3609/10000 [00:10<00:18, 345.36it/s]     36%|███▋      | 3645/10000 [00:10<00:18, 346.86it/s]     37%|███▋      | 3681/10000 [00:10<00:18, 348.14it/s]     37%|███▋      | 3717/10000 [00:11<00:18, 348.74it/s]     38%|███▊      | 3752/10000 [00:11<00:17, 348.95it/s]     38%|███▊      | 3787/10000 [00:11<00:17, 348.99it/s]     38%|███▊      | 3822/10000 [00:11<00:17, 348.80it/s]     39%|███▊      | 3857/10000 [00:11<00:17, 347.84it/s]     39%|███▉      | 3892/10000 [00:11<00:18, 338.94it/s]     39%|███▉      | 3927/10000 [00:11<00:17, 341.03it/s]     40%|███▉      | 3963/10000 [00:11<00:17, 343.79it/s]     40%|███▉      | 3998/10000 [00:11<00:17, 344.60it/s]     40%|████      | 4033/10000 [00:11<00:17, 346.09it/s]     41%|████      | 4069/10000 [00:12<00:17, 347.38it/s]     41%|████      | 4104/10000 [00:12<00:16, 347.44it/s]     41%|████▏     | 4140/10000 [00:12<00:16, 348.23it/s]     42%|████▏     | 4176/10000 [00:12<00:16, 348.92it/s]     42%|████▏     | 4211/10000 [00:12<00:16, 349.03it/s]     42%|████▏     | 4246/10000 [00:12<00:16, 348.09it/s]     43%|████▎     | 4281/10000 [00:12<00:16, 348.47it/s]     43%|████▎     | 4317/10000 [00:12<00:16, 349.05it/s]     44%|████▎     | 4352/10000 [00:12<00:16, 348.88it/s]     44%|████▍     | 4387/10000 [00:12<00:16, 348.38it/s]     44%|████▍     | 4422/10000 [00:13<00:16, 346.46it/s]     45%|████▍     | 4457/10000 [00:13<00:16, 346.28it/s]     45%|████▍     | 4492/10000 [00:13<00:15, 346.82it/s]     45%|████▌     | 4527/10000 [00:13<00:15, 347.41it/s]     46%|████▌     | 4562/10000 [00:13<00:15, 348.00it/s]     46%|████▌     | 4597/10000 [00:13<00:15, 348.09it/s]     46%|████▋     | 4633/10000 [00:13<00:15, 348.70it/s]     47%|████▋     | 4668/10000 [00:13<00:15, 348.37it/s]     47%|████▋     | 4703/10000 [00:13<00:15, 346.43it/s]     47%|████▋     | 4738/10000 [00:13<00:15, 347.15it/s]     48%|████▊     | 4773/10000 [00:14<00:15, 347.98it/s]     48%|████▊     | 4808/10000 [00:14<00:14, 347.96it/s]     48%|████▊     | 4843/10000 [00:14<00:14, 348.56it/s]     49%|████▉     | 4878/10000 [00:14<00:14, 348.66it/s]     49%|████▉     | 4913/10000 [00:14<00:14, 348.42it/s]     49%|████▉     | 4949/10000 [00:14<00:14, 348.98it/s]     50%|████▉     | 4985/10000 [00:14<00:14, 349.33it/s]     50%|█████     | 5021/10000 [00:14<00:14, 349.56it/s]     51%|█████     | 5057/10000 [00:14<00:14, 349.87it/s]     51%|█████     | 5093/10000 [00:14<00:14, 350.01it/s]     51%|█████▏    | 5129/10000 [00:15<00:13, 349.60it/s]     52%|█████▏    | 5164/10000 [00:15<00:13, 349.29it/s]     52%|█████▏    | 5199/10000 [00:15<00:13, 349.22it/s]     52%|█████▏    | 5234/10000 [00:15<00:13, 349.09it/s]     53%|█████▎    | 5270/10000 [00:15<00:13, 349.59it/s]     53%|█████▎    | 5305/10000 [00:15<00:13, 345.96it/s]     53%|█████▎    | 5340/10000 [00:15<00:13, 346.24it/s]     54%|█████▍    | 5376/10000 [00:15<00:13, 347.50it/s]     54%|█████▍    | 5411/10000 [00:15<00:13, 347.28it/s]     54%|█████▍    | 5446/10000 [00:16<00:13, 347.01it/s]     55%|█████▍    | 5481/10000 [00:16<00:13, 347.29it/s]     55%|█████▌    | 5516/10000 [00:16<00:13, 340.09it/s]     56%|█████▌    | 5551/10000 [00:16<00:13, 341.16it/s]     56%|█████▌    | 5586/10000 [00:16<00:12, 342.87it/s]     56%|█████▌    | 5621/10000 [00:16<00:12, 344.66it/s]     57%|█████▋    | 5656/10000 [00:16<00:12, 345.65it/s]     57%|█████▋    | 5691/10000 [00:16<00:12, 346.78it/s]     57%|█████▋    | 5726/10000 [00:16<00:12, 347.15it/s]     58%|█████▊    | 5761/10000 [00:16<00:12, 347.39it/s]     58%|█████▊    | 5796/10000 [00:17<00:12, 345.26it/s]     58%|█████▊    | 5831/10000 [00:17<00:12, 345.75it/s]     59%|█████▊    | 5866/10000 [00:17<00:12, 344.07it/s]     59%|█████▉    | 5901/10000 [00:17<00:11, 344.90it/s]     59%|█████▉    | 5936/10000 [00:17<00:11, 346.00it/s]     60%|█████▉    | 5971/10000 [00:17<00:11, 347.03it/s]     60%|██████    | 6006/10000 [00:17<00:11, 347.70it/s]     60%|██████    | 6041/10000 [00:17<00:11, 347.58it/s]     61%|██████    | 6076/10000 [00:17<00:11, 347.72it/s]     61%|██████    | 6111/10000 [00:17<00:11, 347.93it/s]     61%|██████▏   | 6146/10000 [00:18<00:11, 348.05it/s]     62%|██████▏   | 6181/10000 [00:18<00:10, 348.05it/s]     62%|██████▏   | 6216/10000 [00:18<00:10, 347.68it/s]     63%|██████▎   | 6251/10000 [00:18<00:10, 347.76it/s]     63%|██████▎   | 6286/10000 [00:18<00:10, 346.30it/s]     63%|██████▎   | 6321/10000 [00:18<00:10, 347.23it/s]     64%|██████▎   | 6356/10000 [00:18<00:10, 346.82it/s]     64%|██████▍   | 6391/10000 [00:18<00:10, 346.94it/s]     64%|██████▍   | 6426/10000 [00:18<00:10, 347.19it/s]     65%|██████▍   | 6461/10000 [00:18<00:10, 347.24it/s]     65%|██████▍   | 6496/10000 [00:19<00:10, 347.50it/s]     65%|██████▌   | 6531/10000 [00:19<00:10, 344.43it/s]     66%|██████▌   | 6566/10000 [00:19<00:09, 345.29it/s]     66%|██████▌   | 6601/10000 [00:19<00:09, 346.09it/s]     66%|██████▋   | 6636/10000 [00:19<00:09, 346.28it/s]     67%|██████▋   | 6671/10000 [00:19<00:09, 346.94it/s]     67%|██████▋   | 6706/10000 [00:19<00:09, 347.00it/s]     67%|██████▋   | 6741/10000 [00:19<00:09, 347.11it/s]     68%|██████▊   | 6776/10000 [00:19<00:09, 347.11it/s]     68%|██████▊   | 6811/10000 [00:19<00:09, 347.45it/s]     68%|██████▊   | 6846/10000 [00:20<00:09, 347.17it/s]     69%|██████▉   | 6881/10000 [00:20<00:08, 346.84it/s]     69%|██████▉   | 6916/10000 [00:20<00:08, 346.83it/s]     70%|██████▉   | 6951/10000 [00:20<00:08, 347.13it/s]     70%|██████▉   | 6986/10000 [00:20<00:08, 346.60it/s]     70%|███████   | 7021/10000 [00:20<00:08, 346.67it/s]     71%|███████   | 7056/10000 [00:20<00:08, 347.22it/s]     71%|███████   | 7091/10000 [00:20<00:08, 347.65it/s]     71%|███████▏  | 7126/10000 [00:20<00:08, 347.62it/s]     72%|███████▏  | 7161/10000 [00:20<00:08, 348.06it/s]     72%|███████▏  | 7196/10000 [00:21<00:08, 348.31it/s]     72%|███████▏  | 7231/10000 [00:21<00:07, 347.57it/s]     73%|███████▎  | 7266/10000 [00:21<00:07, 347.63it/s]     73%|███████▎  | 7301/10000 [00:21<00:07, 347.73it/s]     73%|███████▎  | 7336/10000 [00:21<00:07, 343.79it/s]     74%|███████▎  | 7371/10000 [00:21<00:07, 344.97it/s]     74%|███████▍  | 7406/10000 [00:21<00:07, 346.36it/s]     74%|███████▍  | 7441/10000 [00:21<00:07, 347.38it/s]     75%|███████▍  | 7476/10000 [00:21<00:07, 346.96it/s]     75%|███████▌  | 7511/10000 [00:21<00:07, 347.70it/s]     75%|███████▌  | 7546/10000 [00:22<00:07, 347.74it/s]     76%|███████▌  | 7581/10000 [00:22<00:06, 348.00it/s]     76%|███████▌  | 7616/10000 [00:22<00:06, 348.46it/s]     77%|███████▋  | 7651/10000 [00:22<00:06, 348.85it/s]     77%|███████▋  | 7686/10000 [00:22<00:06, 348.65it/s]     77%|███████▋  | 7721/10000 [00:22<00:06, 348.96it/s]     78%|███████▊  | 7756/10000 [00:22<00:06, 348.70it/s]     78%|███████▊  | 7791/10000 [00:22<00:06, 347.52it/s]     78%|███████▊  | 7826/10000 [00:22<00:06, 342.81it/s]     79%|███████▊  | 7861/10000 [00:22<00:06, 344.64it/s]     79%|███████▉  | 7896/10000 [00:23<00:06, 345.45it/s]     79%|███████▉  | 7931/10000 [00:23<00:05, 346.57it/s]     80%|███████▉  | 7966/10000 [00:23<00:05, 347.45it/s]     80%|████████  | 8001/10000 [00:23<00:05, 347.85it/s]     80%|████████  | 8036/10000 [00:23<00:05, 348.17it/s]     81%|████████  | 8071/10000 [00:23<00:05, 348.59it/s]     81%|████████  | 8106/10000 [00:23<00:05, 347.51it/s]     81%|████████▏ | 8141/10000 [00:23<00:05, 346.00it/s]     82%|████████▏ | 8176/10000 [00:23<00:05, 346.75it/s]     82%|████████▏ | 8211/10000 [00:23<00:05, 347.55it/s]     82%|████████▏ | 8246/10000 [00:24<00:05, 348.12it/s]     83%|████████▎ | 8281/10000 [00:24<00:04, 344.68it/s]     83%|████████▎ | 8316/10000 [00:24<00:04, 346.02it/s]     84%|████████▎ | 8352/10000 [00:24<00:04, 347.42it/s]     84%|████████▍ | 8387/10000 [00:24<00:04, 342.89it/s]     84%|████████▍ | 8423/10000 [00:24<00:04, 345.05it/s]     85%|████████▍ | 8458/10000 [00:24<00:04, 344.82it/s]     85%|████████▍ | 8494/10000 [00:24<00:04, 346.67it/s]     85%|████████▌ | 8529/10000 [00:24<00:04, 344.84it/s]     86%|████████▌ | 8564/10000 [00:25<00:04, 345.79it/s]     86%|████████▌ | 8599/10000 [00:25<00:04, 346.55it/s]     86%|████████▋ | 8634/10000 [00:25<00:03, 347.46it/s]     87%|████████▋ | 8669/10000 [00:25<00:03, 348.17it/s]     87%|████████▋ | 8704/10000 [00:25<00:03, 348.49it/s]     87%|████████▋ | 8740/10000 [00:25<00:03, 349.26it/s]     88%|████████▊ | 8775/10000 [00:25<00:03, 349.31it/s]     88%|████████▊ | 8811/10000 [00:25<00:03, 349.57it/s]     88%|████████▊ | 8846/10000 [00:25<00:03, 338.73it/s]     89%|████████▉ | 8881/10000 [00:25<00:03, 341.90it/s]     89%|████████▉ | 8916/10000 [00:26<00:03, 339.94it/s]     90%|████████▉ | 8951/10000 [00:26<00:03, 336.12it/s]     90%|████████▉ | 8985/10000 [00:26<00:03, 325.56it/s]     90%|█████████ | 9018/10000 [00:26<00:03, 326.45it/s]     91%|█████████ | 9051/10000 [00:26<00:03, 261.53it/s]     91%|█████████ | 9080/10000 [00:27<00:06, 140.04it/s]     91%|█████████ | 9102/10000 [00:27<00:06, 140.25it/s]     91%|█████████ | 9122/10000 [00:27<00:06, 140.77it/s]     91%|█████████▏| 9141/10000 [00:27<00:05, 149.39it/s]     92%|█████████▏| 9165/10000 [00:27<00:04, 167.29it/s]     92%|█████████▏| 9185/10000 [00:27<00:04, 166.11it/s]     92%|█████████▏| 9204/10000 [00:27<00:04, 163.60it/s]     92%|█████████▏| 9222/10000 [00:27<00:05, 137.35it/s]     92%|█████████▏| 9238/10000 [00:28<00:05, 133.01it/s]     93%|█████████▎| 9267/10000 [00:28<00:04, 167.02it/s]     93%|█████████▎| 9286/10000 [00:28<00:04, 152.96it/s]     93%|█████████▎| 9303/10000 [00:28<00:04, 152.26it/s]     93%|█████████▎| 9320/10000 [00:28<00:04, 153.14it/s]     93%|█████████▎| 9337/10000 [00:28<00:04, 156.58it/s]     94%|█████████▎| 9362/10000 [00:28<00:03, 180.10it/s]     94%|█████████▍| 9396/10000 [00:28<00:02, 222.47it/s]     94%|█████████▍| 9430/10000 [00:28<00:02, 254.17it/s]     95%|█████████▍| 9464/10000 [00:29<00:01, 277.47it/s]     95%|█████████▍| 9497/10000 [00:29<00:01, 292.12it/s]     95%|█████████▌| 9531/10000 [00:29<00:01, 305.98it/s]     96%|█████████▌| 9565/10000 [00:29<00:01, 315.93it/s]     96%|█████████▌| 9599/10000 [00:29<00:01, 322.08it/s]     96%|█████████▋| 9634/10000 [00:29<00:01, 327.67it/s]     97%|█████████▋| 9669/10000 [00:29<00:00, 331.93it/s]     97%|█████████▋| 9704/10000 [00:29<00:00, 334.59it/s]     97%|█████████▋| 9739/10000 [00:29<00:00, 336.83it/s]     98%|█████████▊| 9773/10000 [00:29<00:00, 326.18it/s]     98%|█████████▊| 9806/10000 [00:30<00:00, 325.96it/s]     98%|█████████▊| 9839/10000 [00:30<00:00, 317.38it/s]     99%|█████████▊| 9873/10000 [00:30<00:00, 321.37it/s]     99%|█████████▉| 9906/10000 [00:30<00:00, 315.52it/s]     99%|█████████▉| 9938/10000 [00:30<00:00, 220.34it/s]    100%|█████████▉| 9964/10000 [00:30<00:00, 206.50it/s]    100%|█████████▉| 9995/10000 [00:30<00:00, 228.19it/s]    100%|██████████| 10000/10000 [00:30<00:00, 323.32it/s]
    The inversion result from `emcee`:
    ============================
    Summary for inversion result
    ============================
    SUCCESS
    ----------------------------
    sampler: <emcee.ensemble.EnsembleSampler object>
    blob_names: ['log_likelihood', 'log_prior']




.. GENERATED FROM PYTHON SOURCE LINES 715-726

Post-sampling analysis
~~~~~~~~~~~~~~~~~~~~~~

By default the raw sampler resulting object is attached to ``cofi``\ ’s
inversion result.

Optionally, you can convert that into an ``arviz`` data structure to
have access to a range of analysis functions. (See more details in
`arviz
documentation <https://python.arviz.org/en/latest/index.html>`__).


.. GENERATED FROM PYTHON SOURCE LINES 726-735

.. code-block:: Python


    import arviz as az

    labels = ["m0", "m1", "m2","m3","m4"]

    sampler = inv_result_3.sampler
    az_idata = az.from_emcee(sampler, var_names=labels)
    # az_idata = inv_result_3.to_arviz()      # alternatively








.. GENERATED FROM PYTHON SOURCE LINES 737-740

.. code-block:: Python


    az_idata.get("posterior")






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div><svg style="position: absolute; width: 0; height: 0; overflow: hidden">
    <defs>
    <symbol id="icon-database" viewBox="0 0 32 32">
    <path d="M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z"></path>
    <path d="M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    <path d="M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z"></path>
    </symbol>
    <symbol id="icon-file-text2" viewBox="0 0 32 32">
    <path d="M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z"></path>
    <path d="M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    <path d="M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z"></path>
    </symbol>
    </defs>
    </svg>
    <style>/* CSS stylesheet for displaying xarray objects in jupyterlab.
     *
     */

    :root {
      --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));
      --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));
      --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));
      --xr-border-color: var(--jp-border-color2, #e0e0e0);
      --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);
      --xr-background-color: var(--jp-layout-color0, white);
      --xr-background-color-row-even: var(--jp-layout-color1, white);
      --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);
    }

    html[theme=dark],
    body[data-theme=dark],
    body.vscode-dark {
      --xr-font-color0: rgba(255, 255, 255, 1);
      --xr-font-color2: rgba(255, 255, 255, 0.54);
      --xr-font-color3: rgba(255, 255, 255, 0.38);
      --xr-border-color: #1F1F1F;
      --xr-disabled-color: #515151;
      --xr-background-color: #111111;
      --xr-background-color-row-even: #111111;
      --xr-background-color-row-odd: #313131;
    }

    .xr-wrap {
      display: block !important;
      min-width: 300px;
      max-width: 700px;
    }

    .xr-text-repr-fallback {
      /* fallback to plain text repr when CSS is not injected (untrusted notebook) */
      display: none;
    }

    .xr-header {
      padding-top: 6px;
      padding-bottom: 6px;
      margin-bottom: 4px;
      border-bottom: solid 1px var(--xr-border-color);
    }

    .xr-header > div,
    .xr-header > ul {
      display: inline;
      margin-top: 0;
      margin-bottom: 0;
    }

    .xr-obj-type,
    .xr-array-name {
      margin-left: 2px;
      margin-right: 10px;
    }

    .xr-obj-type {
      color: var(--xr-font-color2);
    }

    .xr-sections {
      padding-left: 0 !important;
      display: grid;
      grid-template-columns: 150px auto auto 1fr 20px 20px;
    }

    .xr-section-item {
      display: contents;
    }

    .xr-section-item input {
      display: none;
    }

    .xr-section-item input + label {
      color: var(--xr-disabled-color);
    }

    .xr-section-item input:enabled + label {
      cursor: pointer;
      color: var(--xr-font-color2);
    }

    .xr-section-item input:enabled + label:hover {
      color: var(--xr-font-color0);
    }

    .xr-section-summary {
      grid-column: 1;
      color: var(--xr-font-color2);
      font-weight: 500;
    }

    .xr-section-summary > span {
      display: inline-block;
      padding-left: 0.5em;
    }

    .xr-section-summary-in:disabled + label {
      color: var(--xr-font-color2);
    }

    .xr-section-summary-in + label:before {
      display: inline-block;
      content: '►';
      font-size: 11px;
      width: 15px;
      text-align: center;
    }

    .xr-section-summary-in:disabled + label:before {
      color: var(--xr-disabled-color);
    }

    .xr-section-summary-in:checked + label:before {
      content: '▼';
    }

    .xr-section-summary-in:checked + label > span {
      display: none;
    }

    .xr-section-summary,
    .xr-section-inline-details {
      padding-top: 4px;
      padding-bottom: 4px;
    }

    .xr-section-inline-details {
      grid-column: 2 / -1;
    }

    .xr-section-details {
      display: none;
      grid-column: 1 / -1;
      margin-bottom: 5px;
    }

    .xr-section-summary-in:checked ~ .xr-section-details {
      display: contents;
    }

    .xr-array-wrap {
      grid-column: 1 / -1;
      display: grid;
      grid-template-columns: 20px auto;
    }

    .xr-array-wrap > label {
      grid-column: 1;
      vertical-align: top;
    }

    .xr-preview {
      color: var(--xr-font-color3);
    }

    .xr-array-preview,
    .xr-array-data {
      padding: 0 5px !important;
      grid-column: 2;
    }

    .xr-array-data,
    .xr-array-in:checked ~ .xr-array-preview {
      display: none;
    }

    .xr-array-in:checked ~ .xr-array-data,
    .xr-array-preview {
      display: inline-block;
    }

    .xr-dim-list {
      display: inline-block !important;
      list-style: none;
      padding: 0 !important;
      margin: 0;
    }

    .xr-dim-list li {
      display: inline-block;
      padding: 0;
      margin: 0;
    }

    .xr-dim-list:before {
      content: '(';
    }

    .xr-dim-list:after {
      content: ')';
    }

    .xr-dim-list li:not(:last-child):after {
      content: ',';
      padding-right: 5px;
    }

    .xr-has-index {
      font-weight: bold;
    }

    .xr-var-list,
    .xr-var-item {
      display: contents;
    }

    .xr-var-item > div,
    .xr-var-item label,
    .xr-var-item > .xr-var-name span {
      background-color: var(--xr-background-color-row-even);
      margin-bottom: 0;
    }

    .xr-var-item > .xr-var-name:hover span {
      padding-right: 5px;
    }

    .xr-var-list > li:nth-child(odd) > div,
    .xr-var-list > li:nth-child(odd) > label,
    .xr-var-list > li:nth-child(odd) > .xr-var-name span {
      background-color: var(--xr-background-color-row-odd);
    }

    .xr-var-name {
      grid-column: 1;
    }

    .xr-var-dims {
      grid-column: 2;
    }

    .xr-var-dtype {
      grid-column: 3;
      text-align: right;
      color: var(--xr-font-color2);
    }

    .xr-var-preview {
      grid-column: 4;
    }

    .xr-index-preview {
      grid-column: 2 / 5;
      color: var(--xr-font-color2);
    }

    .xr-var-name,
    .xr-var-dims,
    .xr-var-dtype,
    .xr-preview,
    .xr-attrs dt {
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      padding-right: 10px;
    }

    .xr-var-name:hover,
    .xr-var-dims:hover,
    .xr-var-dtype:hover,
    .xr-attrs dt:hover {
      overflow: visible;
      width: auto;
      z-index: 1;
    }

    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      display: none;
      background-color: var(--xr-background-color) !important;
      padding-bottom: 5px !important;
    }

    .xr-var-attrs-in:checked ~ .xr-var-attrs,
    .xr-var-data-in:checked ~ .xr-var-data,
    .xr-index-data-in:checked ~ .xr-index-data {
      display: block;
    }

    .xr-var-data > table {
      float: right;
    }

    .xr-var-name span,
    .xr-var-data,
    .xr-index-name div,
    .xr-index-data,
    .xr-attrs {
      padding-left: 25px !important;
    }

    .xr-attrs,
    .xr-var-attrs,
    .xr-var-data,
    .xr-index-data {
      grid-column: 1 / -1;
    }

    dl.xr-attrs {
      padding: 0;
      margin: 0;
      display: grid;
      grid-template-columns: 125px auto;
    }

    .xr-attrs dt,
    .xr-attrs dd {
      padding: 0;
      margin: 0;
      float: left;
      padding-right: 10px;
      width: auto;
    }

    .xr-attrs dt {
      font-weight: normal;
      grid-column: 1;
    }

    .xr-attrs dt:hover span {
      display: inline-block;
      background: var(--xr-background-color);
      padding-right: 10px;
    }

    .xr-attrs dd {
      grid-column: 2;
      white-space: pre-wrap;
      word-break: break-all;
    }

    .xr-icon-database,
    .xr-icon-file-text2,
    .xr-no-icon {
      display: inline-block;
      vertical-align: middle;
      width: 1em;
      height: 1.5em !important;
      stroke-width: 0;
      stroke: currentColor;
      fill: currentColor;
    }
    </style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;
    Dimensions:  (chain: 32, draw: 10000)
    Coordinates:
      * chain    (chain) int64 0 1 2 3 4 5 6 7 8 9 ... 22 23 24 25 26 27 28 29 30 31
      * draw     (draw) int64 0 1 2 3 4 5 6 7 ... 9993 9994 9995 9996 9997 9998 9999
    Data variables:
        m0       (chain, draw) float64 2.273e-05 2.38e-05 2.38e-05 ... 1.572 1.608
        m1       (chain, draw) float64 6.135e-05 6.019e-05 ... -3.132 -3.175
        m2       (chain, draw) float64 1.468e-05 1.088e-05 1.088e-05 ... 1.42 1.432
        m3       (chain, draw) float64 0.000149 0.0001489 ... -0.2105 -0.2116
        m4       (chain, draw) float64 5.274e-05 5.075e-05 ... 0.006596 0.006628
    Attributes:
        created_at:                 2024-04-17T06:10:01.408706
        arviz_version:              0.17.0
        inference_library:          emcee
        inference_library_version:  3.1.4</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-30fd8e8e-cd99-4528-b1dd-061b87d71847' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-30fd8e8e-cd99-4528-b1dd-061b87d71847' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>chain</span>: 32</li><li><span class='xr-has-index'>draw</span>: 10000</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-d09ca4b7-1ae8-4956-aa3d-4a73bd845b60' class='xr-section-summary-in' type='checkbox'  checked><label for='section-d09ca4b7-1ae8-4956-aa3d-4a73bd845b60' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>chain</span></div><div class='xr-var-dims'>(chain)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 4 5 6 ... 26 27 28 29 30 31</div><input id='attrs-868669ed-47bf-4f9e-8a2b-6276c050880b' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-868669ed-47bf-4f9e-8a2b-6276c050880b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-cdbfee53-c1db-4f07-b421-214e19805792' class='xr-var-data-in' type='checkbox'><label for='data-cdbfee53-c1db-4f07-b421-214e19805792' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
           18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>draw</span></div><div class='xr-var-dims'>(draw)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0 1 2 3 4 ... 9996 9997 9998 9999</div><input id='attrs-02545dde-44a7-4bfd-ab7a-25d9be146e53' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-02545dde-44a7-4bfd-ab7a-25d9be146e53' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-35e8f9d4-31a1-4028-8bdc-a88e7776d168' class='xr-var-data-in' type='checkbox'><label for='data-35e8f9d4-31a1-4028-8bdc-a88e7776d168' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([   0,    1,    2, ..., 9997, 9998, 9999])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-ca4782b2-4a14-4bb5-9595-78cd0e86f3f3' class='xr-section-summary-in' type='checkbox'  checked><label for='section-ca4782b2-4a14-4bb5-9595-78cd0e86f3f3' class='xr-section-summary' >Data variables: <span>(5)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>m0</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>2.273e-05 2.38e-05 ... 1.572 1.608</div><input id='attrs-dc3efe4d-fe03-4b8f-bed4-47413904e37e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-dc3efe4d-fe03-4b8f-bed4-47413904e37e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ec16b938-1bb4-43b8-8d05-360bd791f368' class='xr-var-data-in' type='checkbox'><label for='data-ec16b938-1bb4-43b8-8d05-360bd791f368' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[ 2.27273102e-05,  2.38000743e-05,  2.38000743e-05, ...,
             1.86072167e+00,  1.86072167e+00,  1.86839196e+00],
           [ 5.18508580e-05,  5.18508580e-05,  5.18508580e-05, ...,
             1.84509874e+00,  1.84509874e+00,  1.83556296e+00],
           [ 2.80437616e-05,  2.80437616e-05,  2.67273727e-05, ...,
             1.89042130e+00,  1.89042130e+00,  1.86054679e+00],
           ...,
           [-1.47566824e-05, -2.95342163e-05,  3.05722576e-05, ...,
             1.47534422e+00,  1.47534422e+00,  1.47534422e+00],
           [ 1.32955909e-04,  8.01969156e-05,  8.01969156e-05, ...,
             1.17512042e+00,  1.17512042e+00,  1.17512042e+00],
           [-8.06771007e-05, -9.10128594e-05, -4.61013316e-04, ...,
             1.57157762e+00,  1.57157762e+00,  1.60761391e+00]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>m1</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>6.135e-05 6.019e-05 ... -3.175</div><input id='attrs-bc573d9f-a4bc-4700-bd47-de16bcee7ce1' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-bc573d9f-a4bc-4700-bd47-de16bcee7ce1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-75f00400-08d2-4084-92e7-531a290f2091' class='xr-var-data-in' type='checkbox'><label for='data-75f00400-08d2-4084-92e7-531a290f2091' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[ 6.13489705e-05,  6.01875531e-05,  6.01875531e-05, ...,
            -3.42070708e+00, -3.42070708e+00, -3.42081847e+00],
           [ 2.53389924e-05,  2.53389924e-05,  2.53389924e-05, ...,
            -3.65720532e+00, -3.65720532e+00, -3.63343717e+00],
           [ 1.15306923e-04,  1.15306923e-04,  1.07703771e-04, ...,
            -3.49106890e+00, -3.49106890e+00, -3.46052305e+00],
           ...,
           [-8.88387320e-05, -3.13200850e-05, -5.37103885e-05, ...,
            -3.27081237e+00, -3.27081237e+00, -3.27081237e+00],
           [ 1.49183963e-04,  1.07143278e-04,  1.07143278e-04, ...,
            -2.81569370e+00, -2.81569370e+00, -2.81569370e+00],
           [ 1.44642189e-04,  1.81250004e-04,  2.34174301e-04, ...,
            -3.13223093e+00, -3.13223093e+00, -3.17514317e+00]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>m2</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>1.468e-05 1.088e-05 ... 1.42 1.432</div><input id='attrs-16b90370-a730-43c6-82d4-e9ddb9fa8406' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-16b90370-a730-43c6-82d4-e9ddb9fa8406' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-888c2b29-b9e1-4823-bfc9-353f684c72de' class='xr-var-data-in' type='checkbox'><label for='data-888c2b29-b9e1-4823-bfc9-353f684c72de' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[ 1.46797979e-05,  1.08812827e-05,  1.08812827e-05, ...,
             1.48716094e+00,  1.48716094e+00,  1.49039793e+00],
           [-2.15635380e-04, -2.15635380e-04, -2.15635380e-04, ...,
             1.61093069e+00,  1.61093069e+00,  1.59088277e+00],
           [ 9.32884733e-05,  9.32884733e-05,  8.74487806e-05, ...,
             1.54853657e+00,  1.54853657e+00,  1.53811448e+00],
           ...,
           [-6.07846781e-05, -6.34004742e-05, -1.20266704e-04, ...,
             1.47974804e+00,  1.47974804e+00,  1.47974804e+00],
           [-3.79220530e-05, -1.27450958e-05, -1.27450958e-05, ...,
             1.33555256e+00,  1.33555256e+00,  1.33555256e+00],
           [-1.33221375e-04, -1.44578830e-04, -2.63732409e-04, ...,
             1.41993761e+00,  1.41993761e+00,  1.43249856e+00]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>m3</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.000149 0.0001489 ... -0.2116</div><input id='attrs-a14ef0ad-54ae-4bd7-bf0d-5c3e87854d7e' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-a14ef0ad-54ae-4bd7-bf0d-5c3e87854d7e' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-80a6f895-0a27-4933-a4b3-8c50209d8dea' class='xr-var-data-in' type='checkbox'><label for='data-80a6f895-0a27-4933-a4b3-8c50209d8dea' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[ 1.48969519e-04,  1.48922106e-04,  1.48922106e-04, ...,
            -2.16149007e-01, -2.16149007e-01, -2.16855374e-01],
           [-7.07323214e-05, -7.07323214e-05, -7.07323214e-05, ...,
            -2.34922559e-01, -2.34922559e-01, -2.31261336e-01],
           [ 2.32756258e-05,  2.32756258e-05,  2.32219733e-05, ...,
            -2.26794238e-01, -2.26794238e-01, -2.25483888e-01],
           ...,
           [-8.25311144e-05, -4.11834731e-05, -5.25978018e-05, ...,
            -2.16681089e-01, -2.16681089e-01, -2.16681089e-01],
           [-1.04140129e-04,  1.70063829e-05,  1.70063829e-05, ...,
            -2.01963820e-01, -2.01963820e-01, -2.01963820e-01],
           [ 1.60264293e-04,  1.98332539e-04,  9.66765848e-05, ...,
            -2.10463313e-01, -2.10463313e-01, -2.11606391e-01]])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>m4</span></div><div class='xr-var-dims'>(chain, draw)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>5.274e-05 5.075e-05 ... 0.006628</div><input id='attrs-e6b86702-dcbd-4801-864e-449978f84862' class='xr-var-attrs-in' type='checkbox' disabled><label for='attrs-e6b86702-dcbd-4801-864e-449978f84862' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b82bfad7-d888-4e2c-a080-90ebebcf26b2' class='xr-var-data-in' type='checkbox'><label for='data-b82bfad7-d888-4e2c-a080-90ebebcf26b2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'></dl></div><div class='xr-var-data'><pre>array([[ 5.27365835e-05,  5.07546749e-05,  5.07546749e-05, ...,
             6.73896529e-03,  6.73896529e-03,  6.76061531e-03],
           [ 1.14455269e-04,  1.14455269e-04,  1.14455269e-04, ...,
             7.51523785e-03,  7.51523785e-03,  7.35055612e-03],
           [ 8.38105208e-05,  8.38105208e-05,  8.23445745e-05, ...,
             7.18641302e-03,  7.18641302e-03,  7.14114709e-03],
           ...,
           [ 4.37819857e-06, -3.11344145e-05, -4.16177517e-05, ...,
             6.74227627e-03,  6.74227627e-03,  6.74227627e-03],
           [ 8.44724486e-05,  6.92826311e-05,  6.92826311e-05, ...,
             6.31208974e-03,  6.31208974e-03,  6.31208974e-03],
           [-3.42604562e-04, -3.97008496e-04, -5.26411359e-04, ...,
             6.59647036e-03,  6.59647036e-03,  6.62764043e-03]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-861642eb-738d-4a0b-b7d7-68fe9373ec53' class='xr-section-summary-in' type='checkbox'  ><label for='section-861642eb-738d-4a0b-b7d7-68fe9373ec53' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>chain</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-788cee6a-f3ae-44e8-a49f-05717c6a2f00' class='xr-index-data-in' type='checkbox'/><label for='index-788cee6a-f3ae-44e8-a49f-05717c6a2f00' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,
           18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],
          dtype=&#x27;int64&#x27;, name=&#x27;chain&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>draw</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-5ff3942d-dfe5-4044-9d99-ba8f4b9644ed' class='xr-index-data-in' type='checkbox'/><label for='index-5ff3942d-dfe5-4044-9d99-ba8f4b9644ed' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([   0,    1,    2,    3,    4,    5,    6,    7,    8,    9,
           ...
           9990, 9991, 9992, 9993, 9994, 9995, 9996, 9997, 9998, 9999],
          dtype=&#x27;int64&#x27;, name=&#x27;draw&#x27;, length=10000))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1ec30ecb-0f47-4515-99f8-33d10fc42940' class='xr-section-summary-in' type='checkbox'  checked><label for='section-1ec30ecb-0f47-4515-99f8-33d10fc42940' class='xr-section-summary' >Attributes: <span>(4)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>created_at :</span></dt><dd>2024-04-17T06:10:01.408706</dd><dt><span>arviz_version :</span></dt><dd>0.17.0</dd><dt><span>inference_library :</span></dt><dd>emcee</dd><dt><span>inference_library_version :</span></dt><dd>3.1.4</dd></dl></div></li></ul></div></div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 742-756

.. code-block:: Python


    # a standard `trace` plot
    axes = az.plot_trace(az_idata, backend_kwargs={"constrained_layout":True}); 

    # add legends
    for i, axes_pair in enumerate(axes):
        ax1 = axes_pair[0]
        ax2 = axes_pair[1]
        #ax1.axvline(true_model[i], linestyle='dotted', color='red')
        ax1.set_xlabel("parameter value")
        ax1.set_ylabel("density value")
        ax2.set_xlabel("number of iterations")
        ax2.set_ylabel("parameter value")




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_006.png
   :alt: m0, m0, m1, m1, m2, m2, m3, m3, m4, m4
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_006.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 758-762

.. code-block:: Python


    #tau = sampler.get_autocorr_time()
    #print(f"autocorrelation time: {tau}")








.. GENERATED FROM PYTHON SOURCE LINES 764-789

.. code-block:: Python


    # a Corner plot

    fig, axes = plt.subplots(nparams, nparams, figsize=(12,8))

    if(True): # if we are plotting the model ensemble use this
        az.plot_pair(
            az_idata.sel(draw=slice(300,None)), 
            marginals=True, 
            #reference_values=dict(zip([f"m{i}" for i in range(4)], true_model.tolist())),
            ax=axes,
        );
    else: # if we wish to plot a kernel density plot then use this option
        az.plot_pair(
            az_idata.sel(draw=slice(300,None)), 
            marginals=True, 
            #reference_values=dict(zip([f"m{i}" for i in range(4)], true_model.tolist())),
            kind="kde",
            kde_kwargs={
                "hdi_probs": [0.3, 0.6, 0.9],  # Plot 30%, 60% and 90% HDI contours
                "contourf_kwargs": {"cmap": "Blues"},
            },
            ax=axes,
        );




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_007.png
   :alt: linear regression sealevel
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/jiawen/opt/mambaforge/envs/cofi_dev/lib/python3.10/site-packages/arviz/plots/pairplot.py:232: FutureWarning: The return type of `Dataset.dims` will be changed to return a set of dimension names in future, in order to be more consistent with `DataArray.dims`. To access a mapping from dimension names to lengths, please use `Dataset.sizes`.
      gridsize = int(dataset.dims["draw"] ** 0.35)




.. GENERATED FROM PYTHON SOURCE LINES 794-797

Now we plot the predicted curves for the posterior ensemble of
solutions.


.. GENERATED FROM PYTHON SOURCE LINES 797-808

.. code-block:: Python


    flat_samples = sampler.get_chain(discard=300, thin=30, flat=True)
    inds = np.random.randint(len(flat_samples), size=100) # get a random selection from posterior ensemble

    plot_data(title="Eustatic sea-level")
    plt.xlim(0,maxtime)
    plot_models(flat_samples[inds],color="lightgrey")
    plot_model(ref_x,ref_y, "Reference model", color="darkorange")
    #plt.xlim(15,20.)
    #plt.ylim(-140,-100)




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_008.png
   :alt: Eustatic sea-level
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_008.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 813-816

Expected values, credible intervals and model covariance matrix from the ensemble
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. GENERATED FROM PYTHON SOURCE LINES 816-822

.. code-block:: Python


    print("\n Expected value and 95% credible intervals ")
    for i in range(ndim):
        mcmc = np.percentile(flat_samples[:, i], [5, 50, 95])
        print(" {} {:7.3f} [{:7.3f}, {:7.3f}]".format(labels[i],mcmc[1],mcmc[0],mcmc[2]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


     Expected value and 95% credible intervals 
     m0   1.443 [  1.013,   1.860]
     m1  -3.116 [ -3.555,  -2.662]
     m2   1.415 [  1.273,   1.552]
     m3  -0.209 [ -0.225,  -0.193]
     m4   0.007 [  0.006,   0.007]




.. GENERATED FROM PYTHON SOURCE LINES 824-832

.. code-block:: Python


    CMpost = np.cov(flat_samples.T)
    CM_std= np.std(flat_samples,axis=0)
    print('Posterior model covariance matrix\n',CMpost)
    print('\n Posterior estimate of model standard deviations in each parameter')
    for i in range(ndim):
        print("    {} {:7.4f}".format(labels[i],CM_std[i]))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Posterior model covariance matrix
     [[ 6.61998057e-02 -6.22285505e-02  1.66044648e-02 -1.60072353e-03
       4.76124752e-05]
     [-6.22285505e-02  7.40607509e-02 -2.22504836e-02  2.31006440e-03
      -7.17313742e-05]
     [ 1.66044648e-02 -2.22504836e-02  7.32465299e-03 -8.12350348e-04
       2.62347880e-05]
     [-1.60072353e-03  2.31006440e-03 -8.12350348e-04  9.49930555e-05
      -3.17120906e-06]
     [ 4.76124752e-05 -7.17313742e-05  2.62347880e-05 -3.17120906e-06
       1.08679748e-07]]

     Posterior estimate of model standard deviations in each parameter
        m0  0.2573
        m1  0.2721
        m2  0.0856
        m3  0.0097
        m4  0.0003




.. GENERATED FROM PYTHON SOURCE LINES 837-839

--------------


.. GENERATED FROM PYTHON SOURCE LINES 842-845

Challenge - Change the prior model bounds
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. GENERATED FROM PYTHON SOURCE LINES 848-893

Replace the previous prior bounds to new values

The original uniform bounds had

:math:`{\mathbf l}^T = (-10.,-10.,-10.,-10.)`, and
:math:`{\mathbf u}^T = (10.,10.,10.,10.)`.

Lets replace with

:math:`{\mathbf l}^T = (-0.5,-10.,-10.,-10.)`, and
:math:`{\mathbf u}^T = (0.5,10.,10.,10.)`.

We have only changed the bounds of the first parameter. However since
the true value of constant term was 6, these bounds are now inconsistent
with the true model.

What does this do to the posterior distribution?

Start from the code template below:

::

   m_lower_bound = <CHANGE ME>             # lower bound for uniform prior
   m_upper_bound = <CHANGE ME>             # upper bound for uniform prior

   def log_prior(model):    # uniform distribution
       for i in range(len(m_lower_bound)):
           if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
       return 0.0 # model lies within bounds -> return log(1)

   ######## CoFI BaseProblem - update information
   inv_problem.set_log_prior(log_prior)

   ######## CoFI Inversion - run it
   inv_4 = Inversion(inv_problem, inv_options_3)
   inv_result_4 = inv_4.run()

   flat_samples = inv_result_4.sampler.get_chain(discard=300, thin=30, flat=True)
   inds = np.random.randint(len(flat_samples), size=100) # get a random selection from posterior ensemble

   print("Resulting samples with prior model lower bounds of <CHANGE ME>, upper bounds of <CHANGE ME>")
   plot_data()
   plot_models(flat_samples[inds])
   plot_model(x, true_y, "True model", color="darkorange")


.. GENERATED FROM PYTHON SOURCE LINES 893-898

.. code-block:: Python


    # Copy the template above, Replace <CHANGE ME> with your answer










.. GENERATED FROM PYTHON SOURCE LINES 900-926

.. code-block:: Python


    #@title Solution

    m_lower_bound = np.array([-1.0,-10,-10,-10])             # lower bound for uniform prior
    m_upper_bound = np.array([1.0,10,10,10])                 # upper bound for uniform prior

    def log_prior(model):    # uniform distribution
        for i in range(len(m_lower_bound)):
            if model[i] < m_lower_bound[i] or model[i] > m_upper_bound[i]: return -np.inf
        return 0.0 # model lies within bounds -> return log(1)

    ######## CoFI BaseProblem - update information
    inv_problem.set_log_prior(log_prior)

    ######## CoFI Inversion - run it
    inv_4 = Inversion(inv_problem, inv_options_3)
    inv_result_4 = inv_4.run()

    flat_samples = inv_result_4.sampler.get_chain(discard=300, thin=30, flat=True)
    inds = np.random.randint(len(flat_samples), size=100) # get a random selection from posterior ensemble

    print("Resulting samples with prior model lower bounds of [-1,-10,-10,-10], upper bounds of [2,10,10,10]")
    plot_data()
    plot_models(flat_samples[inds],color="lightgrey")
    plot_model(ref_x, ref_y, "Reference model", color="darkorange")




.. image-sg:: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_009.png
   :alt: linear regression sealevel
   :srcset: /examples/generated/scripts_field_data/images/sphx_glr_linear_regression_sealevel_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/10000 [00:00<?, ?it/s]      0%|          | 33/10000 [00:00<00:30, 326.45it/s]      1%|          | 67/10000 [00:00<00:30, 329.68it/s]      1%|          | 101/10000 [00:00<00:29, 331.34it/s]      1%|▏         | 135/10000 [00:00<00:29, 332.05it/s]      2%|▏         | 169/10000 [00:00<00:29, 332.18it/s]      2%|▏         | 203/10000 [00:00<00:29, 332.12it/s]      2%|▏         | 238/10000 [00:00<00:28, 336.65it/s]      3%|▎         | 275/10000 [00:00<00:28, 345.07it/s]      3%|▎         | 312/10000 [00:00<00:27, 351.74it/s]      3%|▎         | 349/10000 [00:01<00:27, 356.89it/s]      4%|▍         | 386/10000 [00:01<00:26, 359.55it/s]      4%|▍         | 423/10000 [00:01<00:26, 361.54it/s]      5%|▍         | 460/10000 [00:01<00:27, 352.40it/s]      5%|▍         | 496/10000 [00:01<00:33, 284.53it/s]      5%|▌         | 527/10000 [00:01<00:39, 237.71it/s]      6%|▌         | 556/10000 [00:01<00:38, 244.79it/s]      6%|▌         | 583/10000 [00:01<00:45, 207.57it/s]      6%|▌         | 619/10000 [00:02<00:38, 241.06it/s]      7%|▋         | 656/10000 [00:02<00:34, 270.28it/s]      7%|▋         | 693/10000 [00:02<00:31, 294.40it/s]      7%|▋         | 731/10000 [00:02<00:29, 315.66it/s]      8%|▊         | 769/10000 [00:02<00:27, 332.25it/s]      8%|▊         | 807/10000 [00:02<00:26, 345.05it/s]      8%|▊         | 845/10000 [00:02<00:25, 353.02it/s]      9%|▉         | 882/10000 [00:02<00:25, 356.54it/s]      9%|▉         | 920/10000 [00:02<00:25, 361.91it/s]     10%|▉         | 957/10000 [00:03<00:25, 358.14it/s]     10%|▉         | 994/10000 [00:03<00:24, 360.48it/s]     10%|█         | 1032/10000 [00:03<00:24, 365.09it/s]     11%|█         | 1069/10000 [00:03<00:27, 329.03it/s]     11%|█         | 1103/10000 [00:03<00:27, 325.50it/s]     11%|█▏        | 1140/10000 [00:03<00:26, 337.49it/s]     12%|█▏        | 1177/10000 [00:03<00:25, 345.84it/s]     12%|█▏        | 1214/10000 [00:03<00:24, 351.52it/s]     13%|█▎        | 1251/10000 [00:03<00:24, 356.23it/s]     13%|█▎        | 1288/10000 [00:03<00:24, 358.80it/s]     13%|█▎        | 1325/10000 [00:04<00:24, 360.13it/s]     14%|█▎        | 1363/10000 [00:04<00:23, 364.25it/s]     14%|█▍        | 1400/10000 [00:04<00:23, 365.37it/s]     14%|█▍        | 1437/10000 [00:04<00:24, 355.99it/s]     15%|█▍        | 1474/10000 [00:04<00:23, 358.96it/s]     15%|█▌        | 1510/10000 [00:04<00:26, 315.96it/s]     15%|█▌        | 1543/10000 [00:04<00:26, 316.21it/s]     16%|█▌        | 1576/10000 [00:04<00:28, 300.55it/s]     16%|█▌        | 1607/10000 [00:04<00:29, 281.67it/s]     16%|█▋        | 1636/10000 [00:05<00:29, 282.44it/s]     17%|█▋        | 1665/10000 [00:05<00:34, 244.61it/s]     17%|█▋        | 1691/10000 [00:05<00:35, 236.63it/s]     17%|█▋        | 1728/10000 [00:05<00:30, 269.98it/s]     18%|█▊        | 1757/10000 [00:05<00:31, 264.16it/s]     18%|█▊        | 1785/10000 [00:05<00:32, 255.18it/s]     18%|█▊        | 1812/10000 [00:05<00:31, 258.31it/s]     18%|█▊        | 1839/10000 [00:05<00:34, 235.79it/s]     19%|█▊        | 1864/10000 [00:06<00:35, 232.41it/s]     19%|█▉        | 1901/10000 [00:06<00:30, 267.35it/s]     19%|█▉        | 1938/10000 [00:06<00:27, 294.79it/s]     20%|█▉        | 1976/10000 [00:06<00:25, 317.47it/s]     20%|██        | 2009/10000 [00:06<00:25, 314.10it/s]     20%|██        | 2046/10000 [00:06<00:24, 329.03it/s]     21%|██        | 2083/10000 [00:06<00:23, 340.39it/s]     21%|██        | 2118/10000 [00:06<00:24, 328.26it/s]     22%|██▏       | 2156/10000 [00:06<00:22, 341.77it/s]     22%|██▏       | 2193/10000 [00:06<00:22, 347.68it/s]     22%|██▏       | 2230/10000 [00:07<00:21, 353.64it/s]     23%|██▎       | 2268/10000 [00:07<00:21, 360.07it/s]     23%|██▎       | 2306/10000 [00:07<00:21, 364.22it/s]     23%|██▎       | 2345/10000 [00:07<00:20, 369.23it/s]     24%|██▍       | 2383/10000 [00:07<00:20, 369.96it/s]     24%|██▍       | 2421/10000 [00:07<00:20, 372.51it/s]     25%|██▍       | 2459/10000 [00:07<00:20, 372.95it/s]     25%|██▍       | 2497/10000 [00:07<00:20, 369.99it/s]     25%|██▌       | 2535/10000 [00:07<00:24, 308.14it/s]     26%|██▌       | 2572/10000 [00:08<00:23, 322.34it/s]     26%|██▌       | 2609/10000 [00:08<00:22, 334.97it/s]     26%|██▋       | 2647/10000 [00:08<00:21, 345.09it/s]     27%|██▋       | 2685/10000 [00:08<00:20, 353.28it/s]     27%|██▋       | 2724/10000 [00:08<00:20, 361.44it/s]     28%|██▊       | 2762/10000 [00:08<00:19, 365.54it/s]     28%|██▊       | 2799/10000 [00:08<00:19, 363.52it/s]     28%|██▊       | 2836/10000 [00:08<00:19, 363.09it/s]     29%|██▊       | 2873/10000 [00:08<00:23, 307.33it/s]     29%|██▉       | 2910/10000 [00:09<00:21, 322.37it/s]     29%|██▉       | 2946/10000 [00:09<00:22, 315.26it/s]     30%|██▉       | 2982/10000 [00:09<00:21, 326.37it/s]     30%|███       | 3018/10000 [00:09<00:20, 335.13it/s]     31%|███       | 3054/10000 [00:09<00:20, 341.61it/s]     31%|███       | 3089/10000 [00:09<00:20, 343.59it/s]     31%|███       | 3124/10000 [00:09<00:20, 343.40it/s]     32%|███▏      | 3162/10000 [00:09<00:19, 352.08it/s]     32%|███▏      | 3198/10000 [00:09<00:22, 305.24it/s]     32%|███▏      | 3234/10000 [00:10<00:21, 319.67it/s]     33%|███▎      | 3268/10000 [00:10<00:31, 215.64it/s]     33%|███▎      | 3295/10000 [00:10<00:32, 209.38it/s]     33%|███▎      | 3331/10000 [00:10<00:27, 240.49it/s]     34%|███▎      | 3367/10000 [00:10<00:24, 267.17it/s]     34%|███▍      | 3404/10000 [00:10<00:22, 291.79it/s]     34%|███▍      | 3440/10000 [00:10<00:21, 307.01it/s]     35%|███▍      | 3473/10000 [00:11<00:27, 236.32it/s]     35%|███▌      | 3501/10000 [00:11<00:30, 216.57it/s]     35%|███▌      | 3528/10000 [00:11<00:28, 227.90it/s]     36%|███▌      | 3564/10000 [00:11<00:24, 258.15it/s]     36%|███▌      | 3601/10000 [00:11<00:22, 285.51it/s]     36%|███▋      | 3638/10000 [00:11<00:20, 307.50it/s]     37%|███▋      | 3675/10000 [00:11<00:19, 323.94it/s]     37%|███▋      | 3711/10000 [00:11<00:18, 333.98it/s]     37%|███▋      | 3748/10000 [00:11<00:18, 342.25it/s]     38%|███▊      | 3785/10000 [00:12<00:17, 347.83it/s]     38%|███▊      | 3822/10000 [00:12<00:17, 353.59it/s]     39%|███▊      | 3860/10000 [00:12<00:17, 360.26it/s]     39%|███▉      | 3897/10000 [00:12<00:16, 360.86it/s]     39%|███▉      | 3934/10000 [00:12<00:20, 300.34it/s]     40%|███▉      | 3969/10000 [00:12<00:19, 312.16it/s]     40%|████      | 4006/10000 [00:12<00:18, 326.19it/s]     40%|████      | 4040/10000 [00:12<00:21, 278.13it/s]     41%|████      | 4070/10000 [00:13<00:22, 265.94it/s]     41%|████      | 4098/10000 [00:13<00:34, 172.73it/s]     41%|████      | 4121/10000 [00:13<00:37, 155.00it/s]     41%|████▏     | 4140/10000 [00:13<00:36, 161.06it/s]     42%|████▏     | 4159/10000 [00:13<00:36, 158.98it/s]     42%|████▏     | 4177/10000 [00:13<00:35, 163.23it/s]     42%|████▏     | 4198/10000 [00:13<00:33, 174.04it/s]     42%|████▏     | 4217/10000 [00:14<00:34, 169.19it/s]     42%|████▏     | 4235/10000 [00:14<00:49, 116.63it/s]     43%|████▎     | 4251/10000 [00:14<00:46, 124.83it/s]     43%|████▎     | 4281/10000 [00:14<00:35, 163.00it/s]     43%|████▎     | 4303/10000 [00:14<00:32, 176.63it/s]     43%|████▎     | 4324/10000 [00:14<00:30, 184.00it/s]     43%|████▎     | 4345/10000 [00:14<00:37, 151.41it/s]     44%|████▍     | 4383/10000 [00:15<00:27, 203.18it/s]     44%|████▍     | 4411/10000 [00:15<00:25, 221.04it/s]     44%|████▍     | 4441/10000 [00:15<00:23, 240.20it/s]     45%|████▍     | 4467/10000 [00:15<00:22, 244.00it/s]     45%|████▌     | 4500/10000 [00:15<00:20, 266.71it/s]     45%|████▌     | 4538/10000 [00:15<00:18, 296.59it/s]     46%|████▌     | 4576/10000 [00:15<00:17, 319.02it/s]     46%|████▌     | 4609/10000 [00:15<00:21, 254.43it/s]     46%|████▋     | 4648/10000 [00:16<00:18, 286.60it/s]     47%|████▋     | 4687/10000 [00:16<00:16, 312.63it/s]     47%|████▋     | 4721/10000 [00:16<00:16, 315.31it/s]     48%|████▊     | 4760/10000 [00:16<00:15, 334.79it/s]     48%|████▊     | 4797/10000 [00:16<00:15, 343.41it/s]     48%|████▊     | 4835/10000 [00:16<00:14, 353.63it/s]     49%|████▊     | 4872/10000 [00:16<00:14, 357.70it/s]     49%|████▉     | 4911/10000 [00:16<00:13, 364.93it/s]     49%|████▉     | 4948/10000 [00:16<00:13, 366.38it/s]     50%|████▉     | 4986/10000 [00:16<00:13, 370.17it/s]     50%|█████     | 5024/10000 [00:17<00:14, 350.32it/s]     51%|█████     | 5063/10000 [00:17<00:13, 358.95it/s]     51%|█████     | 5100/10000 [00:17<00:15, 311.32it/s]     51%|█████▏    | 5139/10000 [00:17<00:14, 329.61it/s]     52%|█████▏    | 5177/10000 [00:17<00:14, 341.44it/s]     52%|█████▏    | 5216/10000 [00:17<00:13, 352.33it/s]     53%|█████▎    | 5253/10000 [00:17<00:13, 357.02it/s]     53%|█████▎    | 5290/10000 [00:17<00:13, 356.78it/s]     53%|█████▎    | 5329/10000 [00:17<00:12, 364.58it/s]     54%|█████▎    | 5367/10000 [00:18<00:12, 368.88it/s]     54%|█████▍    | 5405/10000 [00:18<00:12, 371.30it/s]     54%|█████▍    | 5443/10000 [00:18<00:12, 371.28it/s]     55%|█████▍    | 5482/10000 [00:18<00:12, 374.25it/s]     55%|█████▌    | 5520/10000 [00:18<00:11, 375.31it/s]     56%|█████▌    | 5558/10000 [00:18<00:11, 374.00it/s]     56%|█████▌    | 5596/10000 [00:18<00:11, 375.22it/s]     56%|█████▋    | 5634/10000 [00:18<00:11, 374.91it/s]     57%|█████▋    | 5672/10000 [00:18<00:11, 374.10it/s]     57%|█████▋    | 5712/10000 [00:18<00:11, 380.23it/s]     58%|█████▊    | 5751/10000 [00:19<00:11, 379.99it/s]     58%|█████▊    | 5790/10000 [00:19<00:11, 378.27it/s]     58%|█████▊    | 5828/10000 [00:19<00:11, 377.19it/s]     59%|█████▊    | 5867/10000 [00:19<00:10, 378.28it/s]     59%|█████▉    | 5905/10000 [00:19<00:10, 377.70it/s]     59%|█████▉    | 5943/10000 [00:19<00:10, 376.46it/s]     60%|█████▉    | 5981/10000 [00:19<00:10, 373.81it/s]     60%|██████    | 6019/10000 [00:19<00:10, 370.23it/s]     61%|██████    | 6057/10000 [00:19<00:10, 368.45it/s]     61%|██████    | 6094/10000 [00:19<00:10, 367.37it/s]     61%|██████▏   | 6132/10000 [00:20<00:10, 368.95it/s]     62%|██████▏   | 6170/10000 [00:20<00:10, 370.07it/s]     62%|██████▏   | 6208/10000 [00:20<00:10, 370.16it/s]     62%|██████▏   | 6247/10000 [00:20<00:10, 374.42it/s]     63%|██████▎   | 6286/10000 [00:20<00:09, 376.84it/s]     63%|██████▎   | 6324/10000 [00:20<00:09, 377.17it/s]     64%|██████▎   | 6362/10000 [00:20<00:09, 377.44it/s]     64%|██████▍   | 6401/10000 [00:20<00:09, 379.76it/s]     64%|██████▍   | 6440/10000 [00:20<00:09, 380.14it/s]     65%|██████▍   | 6479/10000 [00:20<00:09, 379.22it/s]     65%|██████▌   | 6517/10000 [00:21<00:09, 378.63it/s]     66%|██████▌   | 6556/10000 [00:21<00:09, 379.37it/s]     66%|██████▌   | 6594/10000 [00:21<00:09, 376.89it/s]     66%|██████▋   | 6632/10000 [00:21<00:08, 375.29it/s]     67%|██████▋   | 6670/10000 [00:21<00:08, 375.17it/s]     67%|██████▋   | 6708/10000 [00:21<00:08, 375.86it/s]     67%|██████▋   | 6746/10000 [00:21<00:08, 375.65it/s]     68%|██████▊   | 6784/10000 [00:21<00:08, 375.63it/s]     68%|██████▊   | 6822/10000 [00:21<00:08, 376.78it/s]     69%|██████▊   | 6860/10000 [00:21<00:08, 371.38it/s]     69%|██████▉   | 6898/10000 [00:22<00:08, 373.20it/s]     69%|██████▉   | 6936/10000 [00:22<00:08, 373.67it/s]     70%|██████▉   | 6974/10000 [00:22<00:08, 375.25it/s]     70%|███████   | 7012/10000 [00:22<00:07, 375.50it/s]     70%|███████   | 7050/10000 [00:22<00:07, 375.51it/s]     71%|███████   | 7088/10000 [00:22<00:08, 343.09it/s]     71%|███████▏  | 7126/10000 [00:22<00:08, 352.63it/s]     72%|███████▏  | 7164/10000 [00:22<00:07, 359.54it/s]     72%|███████▏  | 7202/10000 [00:22<00:07, 364.92it/s]     72%|███████▏  | 7241/10000 [00:23<00:07, 370.47it/s]     73%|███████▎  | 7279/10000 [00:23<00:07, 369.01it/s]     73%|███████▎  | 7317/10000 [00:23<00:07, 370.44it/s]     74%|███████▎  | 7355/10000 [00:23<00:07, 371.59it/s]     74%|███████▍  | 7393/10000 [00:23<00:06, 373.22it/s]     74%|███████▍  | 7432/10000 [00:23<00:06, 376.27it/s]     75%|███████▍  | 7471/10000 [00:23<00:06, 380.21it/s]     75%|███████▌  | 7510/10000 [00:23<00:06, 377.88it/s]     75%|███████▌  | 7548/10000 [00:23<00:06, 375.14it/s]     76%|███████▌  | 7586/10000 [00:23<00:06, 374.81it/s]     76%|███████▌  | 7624/10000 [00:24<00:06, 375.14it/s]     77%|███████▋  | 7662/10000 [00:24<00:06, 373.90it/s]     77%|███████▋  | 7700/10000 [00:24<00:06, 374.53it/s]     77%|███████▋  | 7739/10000 [00:24<00:05, 376.93it/s]     78%|███████▊  | 7778/10000 [00:24<00:05, 379.43it/s]     78%|███████▊  | 7816/10000 [00:24<00:05, 378.10it/s]     79%|███████▊  | 7854/10000 [00:24<00:05, 378.19it/s]     79%|███████▉  | 7893/10000 [00:24<00:05, 379.54it/s]     79%|███████▉  | 7931/10000 [00:24<00:05, 379.41it/s]     80%|███████▉  | 7969/10000 [00:24<00:05, 379.32it/s]     80%|████████  | 8007/10000 [00:25<00:05, 379.07it/s]     80%|████████  | 8045/10000 [00:25<00:05, 378.13it/s]     81%|████████  | 8083/10000 [00:25<00:05, 378.63it/s]     81%|████████  | 8121/10000 [00:25<00:04, 376.99it/s]     82%|████████▏ | 8159/10000 [00:25<00:04, 372.74it/s]     82%|████████▏ | 8197/10000 [00:25<00:04, 374.50it/s]     82%|████████▏ | 8235/10000 [00:25<00:04, 374.68it/s]     83%|████████▎ | 8274/10000 [00:25<00:04, 377.55it/s]     83%|████████▎ | 8312/10000 [00:25<00:04, 377.81it/s]     84%|████████▎ | 8350/10000 [00:25<00:04, 377.60it/s]     84%|████████▍ | 8388/10000 [00:26<00:04, 378.01it/s]     84%|████████▍ | 8428/10000 [00:26<00:04, 381.88it/s]     85%|████████▍ | 8467/10000 [00:26<00:04, 380.51it/s]     85%|████████▌ | 8506/10000 [00:26<00:03, 382.70it/s]     85%|████████▌ | 8545/10000 [00:26<00:03, 381.57it/s]     86%|████████▌ | 8584/10000 [00:26<00:03, 380.26it/s]     86%|████████▌ | 8623/10000 [00:26<00:03, 379.57it/s]     87%|████████▋ | 8661/10000 [00:26<00:03, 377.28it/s]     87%|████████▋ | 8699/10000 [00:26<00:03, 376.60it/s]     87%|████████▋ | 8737/10000 [00:26<00:03, 377.05it/s]     88%|████████▊ | 8775/10000 [00:27<00:03, 376.62it/s]     88%|████████▊ | 8813/10000 [00:27<00:03, 374.08it/s]     89%|████████▊ | 8851/10000 [00:27<00:03, 374.80it/s]     89%|████████▉ | 8890/10000 [00:27<00:02, 378.48it/s]     89%|████████▉ | 8929/10000 [00:27<00:02, 379.40it/s]     90%|████████▉ | 8967/10000 [00:27<00:02, 378.23it/s]     90%|█████████ | 9005/10000 [00:27<00:02, 377.92it/s]     90%|█████████ | 9043/10000 [00:27<00:02, 370.64it/s]     91%|█████████ | 9081/10000 [00:27<00:02, 372.50it/s]     91%|█████████ | 9119/10000 [00:28<00:02, 370.27it/s]     92%|█████████▏| 9157/10000 [00:28<00:02, 372.60it/s]     92%|█████████▏| 9195/10000 [00:28<00:02, 363.72it/s]     92%|█████████▏| 9234/10000 [00:28<00:02, 370.82it/s]     93%|█████████▎| 9272/10000 [00:28<00:01, 371.94it/s]     93%|█████████▎| 9310/10000 [00:28<00:01, 373.14it/s]     93%|█████████▎| 9349/10000 [00:28<00:01, 376.07it/s]     94%|█████████▍| 9387/10000 [00:28<00:01, 376.59it/s]     94%|█████████▍| 9425/10000 [00:28<00:01, 375.38it/s]     95%|█████████▍| 9464/10000 [00:28<00:01, 379.40it/s]     95%|█████████▌| 9503/10000 [00:29<00:01, 380.25it/s]     95%|█████████▌| 9542/10000 [00:29<00:01, 379.59it/s]     96%|█████████▌| 9581/10000 [00:29<00:01, 381.21it/s]     96%|█████████▌| 9620/10000 [00:29<00:01, 379.73it/s]     97%|█████████▋| 9659/10000 [00:29<00:00, 381.14it/s]     97%|█████████▋| 9698/10000 [00:29<00:00, 378.60it/s]     97%|█████████▋| 9736/10000 [00:29<00:00, 378.13it/s]     98%|█████████▊| 9774/10000 [00:29<00:00, 377.63it/s]     98%|█████████▊| 9812/10000 [00:29<00:00, 378.22it/s]     98%|█████████▊| 9850/10000 [00:29<00:00, 377.38it/s]     99%|█████████▉| 9888/10000 [00:30<00:00, 374.94it/s]     99%|█████████▉| 9926/10000 [00:30<00:00, 373.79it/s]    100%|█████████▉| 9964/10000 [00:30<00:00, 274.66it/s]    100%|█████████▉| 9999/10000 [00:30<00:00, 291.70it/s]    100%|██████████| 10000/10000 [00:30<00:00, 328.00it/s]
    Resulting samples with prior model lower bounds of [-1,-10,-10,-10], upper bounds of [2,10,10,10]




.. GENERATED FROM PYTHON SOURCE LINES 931-933

Is there much change to the posterior distribution?


.. GENERATED FROM PYTHON SOURCE LINES 936-941

--------------

Watermark
---------


.. GENERATED FROM PYTHON SOURCE LINES 941-947

.. code-block:: Python


    watermark_list = ["cofi", "numpy", "scipy", "matplotlib", "emcee", "arviz"]
    for pkg in watermark_list:
        pkg_var = __import__(pkg)
        print(pkg, getattr(pkg_var, "__version__"))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cofi 0.2.7
    numpy 1.24.4
    scipy 1.12.0
    matplotlib 3.8.3
    emcee 3.1.4
    arviz 0.17.0




.. GENERATED FROM PYTHON SOURCE LINES 948-948

sphinx_gallery_thumbnail_number = -1


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 12.274 seconds)


.. _sphx_glr_download_examples_generated_scripts_field_data_linear_regression_sealevel.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: linear_regression_sealevel.ipynb <linear_regression_sealevel.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: linear_regression_sealevel.py <linear_regression_sealevel.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
